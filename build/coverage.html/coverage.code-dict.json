{"/home/travis/build/npmtest/node-npmtest-aliyun-sdk/test.js":"/* istanbul instrument in package npmtest_aliyun_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/lib.npmtest_aliyun_sdk.js":"/* istanbul instrument in package npmtest_aliyun_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_aliyun_sdk = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_aliyun_sdk = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-aliyun-sdk && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_aliyun_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_aliyun_sdk\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_aliyun_sdk.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_aliyun_sdk.rollup.js'] =\n            local.assetsDict['/assets.npmtest_aliyun_sdk.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_aliyun_sdk.__dirname + '/lib.npmtest_aliyun_sdk.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/index.js":"var ALY = require('./lib/aly');\n\nALY.MEMCACHED = require('node_memcached');\n\nmodule.exports = ALY;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/aly.js":"var ALY = require('./core');\nmodule.exports = ALY;\n\n// Load Node HTTP client\nrequire('./http/node');\n\n// Load all service classes\nrequire('./services');\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/core.js":"/**\n * The main ALY namespace\n *\n * @!macro [new] nobrowser\n *   @note This feature is not supported in the browser environment of the SDK.\n */\nvar ALY = {};\nmodule.exports = ALY;\nrequire('./util');\n\nALY.util.update(ALY, {\n\n  VERSION: '1.0.0',\n\n  ServiceInterface: {},\n\n  Signers: {},\n\n  XML: {}\n\n});\n\nrequire('./service');\n\nrequire('./config');\nrequire('./http');\nrequire('./sequential_executor');\nrequire('./event_listeners');\nrequire('./request');\nrequire('./signers/request_signer');\nrequire('./param_validator');\n\nALY.events = new ALY.SequentialExecutor();\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/util.js":"/*global escape:true */\n\nvar ALY = require('./core');\nvar cryptoLib = require('crypto');\nvar os = require('os');\n\n/* jshint -W079 */\nvar Buffer = require('buffer').Buffer;\n/* jshint +W079 */\n\n/**\n * A set of utility methods for use with the ALY SDK.\n *\n * @!attribute abort\n *   Return this value from an iterator function {each} or {arrayEach}\n *   to break out of the iteration.\n *   @example Breaking out of an iterator function\n *     ALY.util.each({a: 1, b: 2, c: 3}, function(key, value) {\n *       if (key == 'b') return ALY.util.abort;\n *     });\n *   @see each\n *   @see arrayEach\n * @api private\n */\nALY.util = {\n  engine: function engine() {\n    if (ALY.util.isBrowser() && typeof navigator !== 'undefined') {\n      return navigator.userAgent;\n    } else {\n      return process.platform + '/' + process.version;\n    }\n  },\n\n  userAgent: function userAgent() {\n    var name = ALY.util.isBrowser() ? 'js' : 'nodejs';\n    var agent = 'aliyun-sdk-' + name + '/' + require('../package.json').version + '(' + os.platform() + '/'\n      + os.release() + '/' + os.arch() + ';' + process.version + ')';\n    return agent;\n  },\n\n  isBrowser: function isBrowser() { return typeof window !== 'undefined'; },\n  isNode: function isNode() { return !ALY.util.isBrowser(); },\n  nodeRequire: function nodeRequire(module) {\n    if (ALY.util.isNode()) return require(module);\n  },\n\n  topEscape: function(clearString) {\n    var output = '';\n    var x = 0;\n    clearString = clearString.toString();\n    var regex = /(^[a-zA-Z0-9-_.~]*)/;\n    while (x < clearString.length) {\n      var match = regex.exec(clearString.substr(x));\n      if (match != null && match.length > 1 && match[1] != '') {\n        output += match[1];\n        x += match[1].length;\n      } else {\n        if (clearString[x] == ' ')\n          output += '%20';\n        else {\n          var charCode = clearString.charCodeAt(x);\n          var hexVal = charCode.toString(16);\n          output += '%' + ( hexVal.length < 2 ? '0' : '' ) + hexVal.toUpperCase();\n        }\n        x++;\n      }\n    }\n    return output;\n  },\n\n  popEscape: function(clearString) {\n    clearString = clearString.toString();\n    clearString = encodeURIComponent(clearString)\n        .replace(/\\!/gi, '%21')\n        .replace(/\\'/gi, '%27')\n        .replace(/\\(/gi, '%28')\n        .replace(/\\)/gi, '%29')\n        .replace(/\\*/gi, '%2A')\n    return clearString;\n  },\n\n  opensearchEscape: function(clearString) {\n    // http://v8.googlecode.com/svn/trunk/src/uri.js\n    return encodeURIComponent(clearString)\n      .replace(/\\!/gi, '%21')\n      .replace(/\\'/gi, '%27')\n      .replace(/\\(/gi, '%28')\n      .replace(/\\)/gi, '%29')\n      .replace(/\\*/gi, '%2A')\n  },\n\n  uriEscape: function uriEscape(string) {\n    /*jshint undef:false */\n    var output = encodeURIComponent(string);\n    output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\n\n    // percent-encodes some extra non-standard characters in a URI\n    output = output.replace(/[*]/g, function(ch) {\n      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();\n    });\n\n    return output;\n  },\n\n  uriEscapePath: function uriEscapePath(string) {\n    var parts = [];\n    ALY.util.arrayEach(string.split('/'), function (part) {\n      parts.push(ALY.util.uriEscape(part));\n    });\n    return parts.join('/');\n  },\n\n  urlParse: function urlParse(url) {\n    return require('url').parse(url);\n  },\n\n  urlFormat: function urlFormat(url) {\n    return require('url').format(url);\n  },\n\n  uuid: function generateUUID(){\n    var d = new Date().getTime();\n    if(window.performance && typeof window.performance.now === \"function\"){\n      d += performance.now(); //use high-precision timer if available\n    }\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (d + Math.random()*16)%16 | 0;\n      d = Math.floor(d/16);\n      return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n  },\n\n  queryParamsToString: function queryParamsToString(params) {\n    var items = [];\n    var escape = ALY.util.uriEscape;\n    var sortedKeys = Object.keys(params).sort();\n\n    ALY.util.arrayEach(sortedKeys, function(name) {\n      var value = params[name];\n      var ename = escape(name);\n      var result = ename;\n      if (Array.isArray(value)) {\n        var vals = [];\n        ALY.util.arrayEach(value, function(item) { vals.push(escape(item)); });\n        result = ename + '=' + vals.sort().join('&' + ename + '=');\n      } else if (value !== undefined && value !== null) {\n        result = ename + '=' + escape(value);\n      }\n      items.push(result);\n    });\n\n    return items.join('&');\n  },\n\n  readFileSync: function readFileSync(path) {\n    if (typeof window !== 'undefined') return null;\n    return require('fs').readFileSync(path, 'utf-8');\n  },\n\n  base64: {\n\n    encode: function encode64(string) {\n      return new Buffer(string).toString('base64');\n    },\n\n    decode: function decode64(string) {\n      return new Buffer(string, 'base64').toString();\n    }\n\n  },\n\n  Buffer: Buffer,\n\n  buffer: {\n    /**\n     * Concatenates a list of Buffer objects.\n     */\n    concat: function(buffers) {\n      var length = 0,\n          offset = 0,\n          buffer = null, i;\n\n      for (i = 0; i < buffers.length; i++) {\n        length += buffers[i].length;\n      }\n\n      buffer = new Buffer(length);\n\n      for (i = 0; i < buffers.length; i++) {\n        buffers[i].copy(buffer, offset);\n        offset += buffers[i].length;\n      }\n\n      return buffer;\n    }\n  },\n\n  string: {\n    byteLength: function byteLength(string) {\n      if (string === null || string === undefined) return 0;\n      if (typeof string === 'string') string = new Buffer(string);\n\n      if (typeof string.byteLength === 'number') {\n        return string.byteLength;\n      } else if (typeof string.length === 'number') {\n        return string.length;\n      } else if (typeof string.size === 'number') {\n        return string.size;\n      } else if (typeof string.path === 'string') {\n        return require('fs').lstatSync(string.path).size;\n      } else {\n        throw ALY.util.error(new Error('Cannot determine length of ' + string),\n          { object: string });\n      }\n    }\n  },\n\n  jamespath: {\n    query: function query(expression, data) {\n      if (!data) return [];\n\n      var results = [];\n      var expressions = expression.split(/\\s+or\\s+/);\n      ALY.util.arrayEach.call(this, expressions, function (expr) {\n        var objects = [data];\n        var tokens = expr.split('.');\n        ALY.util.arrayEach.call(this, tokens, function (token) {\n          var match = token.match('^(.+?)(?:\\\\[(-?\\\\d+|\\\\*)\\\\])?$');\n          var newObjects = [];\n          ALY.util.arrayEach.call(this, objects, function (obj) {\n            if (match[1] === '*') {\n              ALY.util.arrayEach.call(this, obj, function (value) {\n                newObjects.push(value);\n              });\n            } else if (obj.hasOwnProperty(match[1])) {\n              newObjects.push(obj[match[1]]);\n            }\n          });\n          objects = newObjects;\n\n          // handle indexing (token[0], token[-1])\n          if (match[2]) {\n            newObjects = [];\n            ALY.util.arrayEach.call(this, objects, function (obj) {\n              if (Array.isArray(obj)) {\n                if (match[2] === '*') {\n                  newObjects = newObjects.concat(obj);\n                } else {\n                  var idx = parseInt(match[2], 10);\n                  if (idx < 0) idx = obj.length + idx; // negative indexing\n                  newObjects.push(obj[idx]);\n                }\n              }\n            });\n            objects = newObjects;\n          }\n\n          if (objects.length === 0) return ALY.util.abort;\n        });\n\n        if (objects.length > 0) {\n          results = objects;\n          return ALY.util.abort;\n        }\n      });\n\n      return results;\n    },\n\n    find: function find(expression, data) {\n      return ALY.util.jamespath.query(expression, data)[0];\n    }\n  },\n\n  /**\n   * Date and time utility functions.\n   */\n  date: {\n\n    /**\n     * @return [Date] the current JavaScript date object. Since all\n     *   ALY services rely on this date object, you can override\n     *   this function to provide a special time value to ALY service\n     *   requests.\n     */\n    getDate: function getDate() { return new Date(); },\n\n    // for taobao open platform\n    top: function top(date, fmt) {\n      fmt = fmt || '%Y-%M-%dT%H:%m:%sZ';\n\n      function pad(value) {\n        return (value.toString().length < 2) ? '0' + value : value;\n      };\n\n      return fmt.replace(/%([a-zA-Z])/g, function (_, fmtCode) {\n        switch (fmtCode) {\n          case 'Y':\n            return date.getUTCFullYear();\n          case 'M':\n            return pad(date.getUTCMonth() + 1);\n          case 'd':\n            return pad(date.getUTCDate());\n          case 'H':\n            return pad(date.getUTCHours());\n          case 'm':\n            return pad(date.getUTCMinutes());\n          case 's':\n            return pad(date.getUTCSeconds());\n          default:\n            throw new Error('Unsupported format code: ' + fmtCode);\n        }\n      });\n    },\n\n    /**\n     * @return [String] the date in ISO-8601 format\n     */\n    iso8601: function iso8601(date) {\n      if (date === undefined) { date = ALY.util.date.getDate(); }\n      return date.toISOString();\n    },\n\n    /**\n     * @return [String] the date in RFC 822 format\n     */\n    rfc822: function rfc822(date) {\n      if (date === undefined) { date = ALY.util.date.getDate(); }\n      return date.toUTCString().replace(\"UTC\", \"GMT\");\n    },\n\n    unixSeconds: function unixSeconds(date) {\n      if (date === undefined) { date = ALY.util.date.getDate(); }\n      return Math.floor(date.getTime() / 1000);\n    },\n\n    unixMilliseconds: function unixMilliseconds(date) {\n      if (date === undefined) { date = ALY.util.date.getDate(); }\n      return date.getTime();\n    },\n\n    /**\n     * @param [String,number,Date] date\n     * @return [Date]\n     */\n    from: function format(date) {\n      if (typeof date === 'number') {\n        if(date.toString().length == 10) {\n          return new Date(date * 1000); // unix timestamp in seconds\n        }\n        return new Date(date); // unix timestamp in mill seconds\n      }\n      else if(Object.prototype.toString.call(date) === '[object Date]') {\n        return date;\n      }\n      else {\n        return new Date(date);\n      }\n    },\n\n    /**\n     * Given a Date or date-like value, this function formats the\n     * date into a string of the requested value.\n     * @param [String,number,Date] date\n     * @param [String] formatter Valid formats are:\n     #   * 'iso8601'\n     #   * 'rfc822'\n     #   * 'unixSeconds'\n     #   * 'unixMilliseconds'\n     * @return [String]\n     */\n    format: function format(date, formatter) {\n      if (!formatter) formatter = 'unixSeconds';\n      return ALY.util.date[formatter](ALY.util.date.from(date));\n    }\n\n  },\n\n  crypto: {\n    crc32Table: [\n     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,\n     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,\n     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,\n     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,\n     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,\n     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,\n     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,\n     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,\n     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,\n     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,\n     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,\n     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,\n     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,\n     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,\n     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,\n     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,\n     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,\n     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,\n     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,\n     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,\n     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,\n     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,\n     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,\n     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,\n     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,\n     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,\n     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,\n     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,\n     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,\n     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,\n     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,\n     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,\n     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,\n     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,\n     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,\n     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,\n     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,\n     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,\n     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,\n     0x2D02EF8D],\n\n    crc32: function crc32(data) {\n      /*jshint bitwise:false*/\n      var tbl = ALY.util.crypto.crc32Table;\n      var crc = 0 ^ -1;\n\n      if (typeof data === 'string') {\n        data = new Buffer(data);\n      }\n\n      for (var i = 0; i < data.length; i++) {\n        var code = data.readUInt8(i);\n        crc = (crc>>>8) ^ tbl[(crc^code)&0xFF];\n      }\n      return (crc ^ -1) >>> 0;\n    },\n\n    hmac: function hmac(key, string, digest, fn) {\n      if (!digest) digest = 'binary';\n      if (digest === 'buffer') { digest = undefined; }\n      if (!fn) fn = 'sha256';\n      if (typeof string === 'string') string = new Buffer(string);\n      return cryptoLib.createHmac(fn, key).update(string).digest(digest);\n    },\n\n    md5: function md5(data, digest) {\n      if (!digest) { digest = 'binary'; }\n      if (digest === 'buffer') { digest = undefined; }\n      if (typeof data === 'string') data = new Buffer(data);\n      return ALY.util.crypto.createHash('md5').update(data).digest(digest);\n    },\n\n    sha256: function sha256(string, digest) {\n      if (!digest) { digest = 'binary'; }\n      if (digest === 'buffer') { digest = undefined; }\n      if (typeof string === 'string') string = new Buffer(string);\n      return ALY.util.crypto.createHash('sha256').update(string).digest(digest);\n    },\n\n    toHex: function toHex(data) {\n      var out = [];\n      for (var i = 0; i < data.length; i++) {\n        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));\n      }\n      return out.join('');\n    },\n\n    createHash: function createHash(algorithm) {\n      return cryptoLib.createHash(algorithm);\n    }\n\n  },\n\n  /** @!ignore */\n\n  /* Abort constant */\n  abort: {},\n\n  each: function each(object, iterFunction) {\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        var ret = iterFunction.call(this, key, object[key]);\n        if (ret === ALY.util.abort) break;\n      }\n    }\n  },\n\n  arrayEach: function arrayEach(array, iterFunction) {\n    for (var idx in array) {\n      if (array.hasOwnProperty(idx)) {\n        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));\n        if (ret === ALY.util.abort) break;\n      }\n    }\n  },\n\n  update: function update(obj1, obj2) {\n    ALY.util.each(obj2, function iterator(key, item) {\n      obj1[key] = item;\n    });\n    return obj1;\n  },\n\n  merge: function merge(obj1, obj2) {\n    return ALY.util.update(ALY.util.copy(obj1), obj2);\n  },\n\n  copy: function copy(object) {\n    if (object === null || object === undefined) return object;\n    var dupe = {};\n    /*jshint forin:false */\n    for (var key in object) {\n      dupe[key] = object[key];\n    }\n    return dupe;\n  },\n\n  isEmpty: function isEmpty(obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  isType: function isType(obj, type) {\n    // handle cross-\"frame\" objects\n    if (typeof type === 'function') type = ALY.util.typeName(type);\n    return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n  },\n\n  typeName: function typeName(type) {\n    if (type.hasOwnProperty('name')) return type.name;\n    var str = type.toString();\n    var match = str.match(/^\\s*function (.+)\\(/);\n    return match ? match[1] : str;\n  },\n\n  error: function error(err, options) {\n    var originalError = null;\n    if (typeof err.message === 'string' && err.message !== '') {\n      if (typeof options === 'string' || (options && options.message)) {\n        originalError = ALY.util.copy(err);\n        originalError.message = err.message;\n      }\n    }\n    err.message = err.message || null;\n\n    if (typeof options === 'string') {\n      err.message = options;\n    }\n    else if (typeof options === 'object') {\n      ALY.util.update(err, options);\n      if (options.message)\n        err.message = options.message;\n      if (options.code || options.name)\n        err.code = options.code || options.name;\n      if (options.stack)\n        err.stack = options.stack;\n    }\n\n    if (typeof Object.defineProperty === 'function') {\n      Object.defineProperty(err, 'name', {writable: true, enumerable: false});\n      Object.defineProperty(err, 'message', {enumerable: true});\n    }\n\n    err.name = err.name || err.code || 'Error';\n    err.time = new Date();\n\n    if (originalError) err.originalError = originalError;\n\n    return err;\n  },\n\n  /**\n   * @api private\n   */\n  inherit: function inherit(klass, features) {\n    var newObject = null;\n    if (features === undefined) {\n      features = klass;\n      klass = Object;\n      newObject = {};\n    } else {\n      /*jshint newcap:false */\n      /*jshint camelcase:false */\n      var ctor = function __ctor_wrapper__() {};\n      ctor.prototype = klass.prototype;\n      newObject = new ctor();\n    }\n\n    // constructor not supplied, create pass-through ctor\n    if (features.constructor === Object) {\n      features.constructor = function() {\n        if (klass !== Object) {\n          return klass.apply(this, arguments);\n        }\n      };\n    }\n\n    features.constructor.prototype = newObject;\n    ALY.util.update(features.constructor.prototype, features);\n    features.constructor.__super__ = klass;\n    return features.constructor;\n  },\n\n  /**\n   * @api private\n   */\n  mixin: function mixin() {\n    var klass = arguments[0];\n    for (var i = 1; i < arguments.length; i++) {\n      /*jshint forin:false*/\n      for (var prop in arguments[i].prototype) {\n        var fn = arguments[i].prototype[prop];\n        if (prop != 'constructor') {\n          klass.prototype[prop] = fn;\n        }\n      }\n    }\n    return klass;\n  },\n\n  /**\n   * @api private\n   */\n  hideProperties: function hideProperties(obj, props) {\n    if (typeof Object.defineProperty !== 'function') return;\n\n    ALY.util.arrayEach(props, function (key) {\n      Object.defineProperty(obj, key, {\n        enumerable: false, writable: true, configurable: true });\n    });\n  }\n};\n\nmodule.exports = ALY.util;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/service.js":"var ALY = require('./core');\nvar inherit = ALY.util.inherit;\n\n/**\n * The service class representing an ALY service.\n *\n * @abstract\n *\n * @!attribute apiVersions\n *   @return [Array<String>] the list of API versions supported by this service.\n *   @readonly\n */\nALY.Service = inherit({\n  /**\n   * Create a new service object with a configuration object\n   *\n   * @param config [map] a map of configuration options\n   */\n  constructor: function Service(config) {\n    if (!this.loadServiceClass) {\n      throw ALY.util.error(new Error(),\n        'Service must be constructed with `new\\' operator');\n    }\n    var ServiceClass = this.loadServiceClass(config || {});\n    if (ServiceClass) return new ServiceClass(config);\n    this.initialize(config);\n  },\n\n  /**\n   * @api private\n   */\n  initialize: function initialize(config) {\n    this.config = new ALY.Config(config);\n  },\n\n  /**\n   * @api private\n   */\n  loadServiceClass: function loadServiceClass(serviceConfig) {\n    if (!ALY.util.isEmpty(this.api)) {\n      return;\n    } else if (!this.constructor.services) {\n      return;\n    } else {\n      return this.getLatestServiceClass(serviceConfig.apiVersion);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  getLatestServiceClass: function getLatestServiceClass(version) {\n    if (this.constructor.services[version] === null) {\n      ALY.Service.defineServiceApi(this.constructor, version);\n    }\n\n    return this.constructor.services[version];\n  },\n\n  /**\n   * @api private\n   */\n  api: {},\n\n  /**\n   * @api private\n   */\n  defaultRetryCount: 3,\n\n  /**\n   * Calls an operation on a service with the given input parameters.\n   *\n   * @param operation [String] the name of the operation to call on the service.\n   * @param params [map] a map of input options for the operation\n   * @callback callback function(err, data)\n   *   If a callback is supplied, it is called when a response is returned\n   *   from the service.\n   *   @param err [Error] the error object returned from the request.\n   *     Set to `null` if the request is successful.\n   *   @param data [Object] the de-serialized data returned from\n   *     the request. Set to `null` if a request error occurs.\n   */\n  makeRequest: function makeRequest(operation, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = null;\n    }\n\n    params = params || {};\n    if (this.config.params) { // copy only toplevel bound params\n      var rules = this.api.operations[operation];\n      if (rules) {\n        params = ALY.util.copy(params);\n        ALY.util.each(this.config.params, function(key, value) {\n          if (rules.input.members[key]) {\n            if (params[key] === undefined || params[key] === null) {\n              params[key] = value;\n            }\n          }\n        });\n      }\n    }\n\n    var request = new ALY.Request(this, operation, params);\n    this.addAllRequestListeners(request);\n\n    if (callback) request.send(callback);\n    return request;\n  },\n\n  /**\n   * Calls an operation on a service with the given input parameters, without\n   * any authentication data. This method is useful for \"public\" API operations.\n   *\n   * @param operation [String] the name of the operation to call on the service.\n   * @param params [map] a map of input options for the operation\n   * @callback callback function(err, data)\n   *   If a callback is supplied, it is called when a response is returned\n   *   from the service.\n   *   @param err [Error] the error object returned from the request.\n   *     Set to `null` if the request is successful.\n   *   @param data [Object] the de-serialized data returned from\n   *     the request. Set to `null` if a request error occurs.\n   */\n  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    var request = this.makeRequest(operation, params);\n    request.removeListener('sign', ALY.EventListeners.Core.SIGN);\n    if (this.api.format === 'query') { // query services turn into GET requests\n      request.addListener('build', function convertToGET(request) {\n        request.httpRequest.method = 'GET';\n        request.httpRequest.path = '/?' + request.httpRequest.body;\n        request.httpRequest.body = '';\n\n        // don't need these headers on a GET request\n        delete request.httpRequest.headers['Content-Length'];\n        delete request.httpRequest.headers['Content-Type'];\n      });\n    }\n\n    return callback ? request.send(callback) : request;\n  },\n\n  /**\n   * @api private\n   */\n  addAllRequestListeners: function addAllRequestListeners(request) {\n    var list = [ALY.events, ALY.EventListeners.Core,\n                this.serviceInterface()];\n    for (var i = 0; i < list.length; i++) {\n      if (list[i]) request.addListeners(list[i]);\n    }\n\n    // disable parameter validation\n    if (!this.config.paramValidation) {\n      request.removeListener('validate',\n        ALY.EventListeners.Core.VALIDATE_PARAMETERS);\n    }\n\n    if (this.config.logger) { // add logging events\n      request.addListeners(ALY.EventListeners.Logger);\n    }\n\n    this.setupRequestListeners(request);\n  },\n\n  /**\n   * Override this method to setup any custom request listeners for each\n   * new request to the service.\n   *\n   * @abstract\n   */\n  setupRequestListeners: function setupRequestListeners() {\n  },\n\n  /**\n   * Gets the signer class for a given request\n   * @api private\n   */\n  getSignerClass: function getSignerClass() {\n    var version = this.api.signatureVersion;\n    return ALY.Signers.RequestSigner.getVersion(version);\n  },\n\n  /**\n   * @api private\n   */\n  serviceInterface: function serviceInterface() {\n    switch (this.api.format) {\n      case 'query': return ALY.EventListeners.Query;\n      case 'json': return ALY.EventListeners.Json;\n      case 'rest': return ALY.EventListeners.Rest;\n      case 'rest-json': return ALY.EventListeners.RestJson;\n      case 'pop': return ALY.EventListeners.Pop;\n      case 'top': return ALY.EventListeners.Top;\n      case 'rest-xml': return ALY.EventListeners.RestXml;\n    }\n    if (this.api.format) {\n      throw new Error('Invalid service `format\\' ' +\n        this.api.format + ' in API config');\n    }\n  },\n\n  /**\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    return resp.httpResponse.statusCode < 300;\n  },\n\n  /**\n   * How many times a failed request should be retried before giving up.\n   * the defaultRetryCount can be overriden by service classes.\n   *\n   * @api private\n   */\n  numRetries: function numRetries() {\n    if (this.config.maxRetries !== undefined) {\n      return this.config.maxRetries;\n    } else {\n      return this.defaultRetryCount;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays() {\n    var retryCount = this.numRetries();\n    var delays = [];\n    for (var i = 0; i < retryCount; ++i) {\n      delays[i] = Math.pow(2, i) * 30;\n    }\n    return delays;\n  },\n\n  /**\n   * @api private\n   */\n  retryableError: function retryableError(error) {\n    if (this.networkingError(error)) return true;\n    if (this.throttledError(error)) return true;\n    if (error.statusCode >= 500) return true;\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  networkingError: function networkingError(error) {\n    return error.code == 'NetworkingError';\n  },\n\n  /**\n   * @api private\n   */\n  throttledError: function throttledError(error) {\n    // this logic varies between services\n    return (error.code == 'ProvisionedThroughputExceededException');\n  },\n\n  /**\n   * @api private\n   */\n  isRegionCN: function isRegionCN() {\n    if (!this.config.region) return false;\n    return this.config.region.match(/^cn-/) ? true : false;\n  },\n\n  /**\n   * @api private\n   */\n  isRegionV4: function isRegionV4() {\n    return this.isRegionCN();\n  },\n\n  /**\n   * @api private\n   */\n  paginationConfig: function paginationConfig(operation, throwException) {\n    function fail(name) {\n      if (throwException) {\n        var e = new Error();\n        throw ALY.util.error(e, 'No pagination configuration for ' + name);\n      }\n      return null;\n    }\n\n    if (!this.api.pagination) return fail('service');\n    if (!this.api.pagination[operation]) return fail(operation);\n    return this.api.pagination[operation];\n  }\n});\n\nALY.util.update(ALY.Service, {\n\n  /**\n   * Adds one method for each operation described in the api configuration\n   *\n   * @api private\n   */\n  defineMethods: function defineMethods(svc) {\n    ALY.util.each(svc.prototype.api.operations, function iterator(method) {\n      if (svc.prototype[method]) return;\n      svc.prototype[method] = function (params, callback) {\n        return this.makeRequest(method, params, callback);\n      };\n    });\n  },\n\n  defineService: function defineService(serviceIdentifier, versions, features) {\n    if (!Array.isArray(versions)) {\n      features = versions;\n      versions = [];\n    }\n\n    var svc = inherit(ALY.Service, features || {});\n\n    if (typeof serviceIdentifier === 'string') {\n      // create versions hash\n      var services = {};\n      for (var i = 0; i < versions.length; i++) {\n        services[versions[i]] = null;\n      }\n\n      svc.services = svc.services || services;\n      svc.apiVersions = Object.keys(svc.services).sort();\n      svc.serviceIdentifier = svc.serviceIdentifier || serviceIdentifier;\n    } else { // defineService called with an API\n      svc.prototype.api = serviceIdentifier;\n      ALY.Service.defineMethods(svc);\n    }\n\n    return svc;\n  },\n\n  /**\n   * @api private\n   */\n  defineServiceApi: function defineServiceApi(superclass, version) {\n    var svc = inherit(superclass, {\n      serviceIdentifier: superclass.serviceIdentifier\n    });\n\n    if (typeof version === 'string') {\n      var file = superclass.serviceIdentifier + '-' + version;\n      var path = __dirname + '/../apis/' + file + '.json';\n      try {\n        if(ALY.util.isBrowser()) {\n          svc.prototype.api = require(file + '.json');\n        }\n        else {\n          var fs = require('fs');\n          svc.prototype.api = JSON.parse(fs.readFileSync(path));\n        }\n      } catch (err) {\n        throw ALY.util.error(err, {\n          message: 'Could not find API configuration ' + file\n        });\n      }\n\n      if (!superclass.services.hasOwnProperty(version)) {\n        superclass.apiVersions.push(version);\n      }\n      superclass.services[version] = svc;\n    } else {\n      setApi(version);\n    }\n\n    ALY.Service.defineMethods(svc);\n    return svc;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/config.js":"var ALY = require('./core');\n\nALY.Config = ALY.util.inherit({\n\n  constructor: function Config(options) {\n    if (options === undefined) options = {};\n\n    ALY.util.each.call(this, this.keys, function (key, value) {\n      this.set(key, options[key], value);\n    });\n  },\n\n  clear: function clear() {\n    /*jshint forin:false */\n    ALY.util.each.call(this, this.keys, function (key) {\n      delete this[key];\n    });\n\n    // reset credential provider\n    this.set('credentials', undefined);\n    this.set('credentialProvider', undefined);\n  },\n\n  getCredentials: function getCredentials() {\n    return {\n      accessKeyId: this.accessKeyId,\n      secretAccessKey: this.secretAccessKey,\n      securityToken: this.securityToken\n    };\n  },\n\n  /**\n   * Sets a property on the configuration object, allowing for a\n   * default value\n   * @api private\n   */\n  set: function set(property, value, defaultValue) {\n    if (value === undefined) {\n      if (defaultValue === undefined) {\n        defaultValue = this.keys[property];\n      }\n      if (typeof defaultValue === 'function') {\n        this[property] = defaultValue.call(this);\n      } else {\n        this[property] = defaultValue;\n      }\n    } else {\n      this[property] = value;\n    }\n  },\n\n  keys: {\n    accessKeyId: null,\n    secretAccessKey: null,\n    region: null,\n    logger: null,\n    apiVersions: {},\n    apiVersion: null,\n    endpoint: undefined,\n    endpointFixed: undefined, // 目前仅对 ots 有效\n    httpOptions: {},\n    maxRetries: undefined,\n    maxRedirects: 10,\n    paramValidation: true,\n    sslEnabled: true,\n    computeChecksums: true,\n    securityToken: ''\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/http.js":"var ALY = require('./core');\nvar inherit = ALY.util.inherit;\n\nALY.Endpoint = inherit({\n\n  constructor: function Endpoint(endpoint) {\n    ALY.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n\n    if (typeof endpoint === 'undefined' || endpoint === null) {\n      throw new Error('Invalid endpoint: ' + endpoint);\n    }\n\n    if (!endpoint.match(/^http/)) {\n      throw new Error('错误的 endpoint 格式, 需要以 http 或者 https 开头');\n    }\n\n    ALY.util.update(this, ALY.util.urlParse(endpoint));\n\n    // Ensure the port property is set as an integer\n    if (this.port) {\n      this.port = parseInt(this.port, 10);\n    } else {\n      this.port = this.protocol === 'https:' ? 443 : 80;\n    }\n  }\n\n});\n\nALY.HttpRequest = inherit({\n\n  constructor: function HttpRequest(endpoint, region) {\n    this.method = 'POST';\n    this.path = endpoint.path || '/';\n    this.headers = {};\n    this.body = '';\n    this.endpoint = endpoint;\n    this.region = region;\n    this.setUserAgent();\n  },\n\n  setUserAgent: function setUserAgent() {\n    //var prefix = ALY.util.isBrowser() ? 'X-Aly-' : '';\n    //this.headers[prefix + 'User-Agent'] = ALY.util.userAgent();\n    //this.headers['x-sdk-client'] = this.headers['User-Agent'] = ALY.util.userAgent();\n    // pop 现在不支持 x-sdk-client 在浏览器设置\n    this.headers['User-Agent'] = ALY.util.userAgent();\n  },\n\n  pathname: function pathname() {\n    return this.path.split('?', 1)[0];\n  },\n\n  search: function search() {\n    return this.path.split('?', 2)[1] || '';\n  },\n\n  debug: function () {\n    if(process.env.DEBUG == 'aliyun') {\n      console.log('-------- HttpRequest Start: --------');\n      console.log('method:', this.method);\n      console.log('path:', this.path);\n      console.log('headers:');\n      for(var i in this.headers) {\n        if (i == 'constructor')\n          continue;\n        console.log(i, ':', this.headers[i]);\n      };\n    }\n  }\n});\n\nALY.HttpResponse = inherit({\n\n  constructor: function HttpResponse() {\n    this.statusCode = undefined;\n    this.headers = {};\n    this.body = undefined;\n  }\n});\n\n\nALY.HttpClient = inherit({});\n\nALY.HttpClient.getInstance = function getInstance() {\n  /*jshint newcap:false */\n  if (this.singleton === undefined) {\n    this.singleton = new this();\n  }\n  return this.singleton;\n};\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/sequential_executor.js":"var ALY = require('./core');\nvar domain = ALY.util.nodeRequire('domain');\n\n/**\n * @!method on(eventName, callback)\n *   Registers an event listener callback for the event given by `eventName`.\n *   Parameters passed to the callback function depend on the individual event\n *   being triggered. See the event documentation for those parameters.\n *\n *   @param eventName [String] the event name to register the listener for\n *   @param callback [Function] the listener callback function\n *   @return [ALY.SequentialExecutor] the same object for chaining\n */\nALY.SequentialExecutor = ALY.util.inherit({\n\n  constructor: function SequentialExecutor() {\n    this.domain = domain && domain.active;\n    this._events = {};\n  },\n\n  /**\n   * @api private\n   */\n  listeners: function listeners(eventName) {\n    return this._events[eventName] ? this._events[eventName].slice(0) : [];\n  },\n\n  on: function on(eventName, listener) {\n    if (this._events[eventName]) {\n      this._events[eventName].push(listener);\n    } else {\n      this._events[eventName] = [listener];\n    }\n    return this;\n  },\n\n  onAsync: function onAsync(eventName, listener) {\n    listener._isAsync = true;\n    return this.on(eventName, listener);\n  },\n\n  removeListener: function removeListener(eventName, listener) {\n    var listeners = this._events[eventName];\n    if (listeners) {\n      var length = listeners.length;\n      var position = -1;\n      for (var i = 0; i < length; ++i) {\n        if (listeners[i] === listener) {\n          position = i;\n        }\n      }\n      if (position > -1) {\n        listeners.splice(position, 1);\n      }\n    }\n    return this;\n  },\n\n  removeAllListeners: function removeAllListeners(eventName) {\n    if (eventName) {\n      delete this._events[eventName];\n    } else {\n      this._events = {};\n    }\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  emit: function emit(eventName, eventArgs, doneCallback) {\n    if (!doneCallback) doneCallback = this.unhandledErrorCallback;\n    if (domain && this.domain instanceof domain.Domain)\n      this.domain.enter();\n\n    if(process.env.DEBUG == 'aliyun') {\n      console.log('emit', eventName);\n    }\n    var listeners = this.listeners(eventName);\n    var count = listeners.length;\n    this.callListeners(listeners, eventArgs, doneCallback);\n    return count > 0;\n  },\n\n  /**\n   * @api private\n   */\n  callListeners: function callListeners(listeners, args, doneCallback) {\n    if (listeners.length === 0) {\n      doneCallback.call(this);\n      if (domain && this.domain instanceof domain.Domain)\n        this.domain.exit();\n    } else {\n      var listener = listeners.shift();\n      if (listener._isAsync) {\n\n        // asynchronous listener\n        var callNextListener = function(err) {\n          if (err) {\n            doneCallback.call(this, err);\n            if (domain && this.domain instanceof domain.Domain)\n              this.domain.exit();\n          } else {\n            this.callListeners(listeners, args, doneCallback);\n          }\n        }.bind(this);\n        listener.apply(this, args.concat([callNextListener]));\n\n      } else {\n\n        // synchronous listener\n        try {\n          listener.apply(this, args);\n          this.callListeners(listeners, args, doneCallback);\n        } catch (err) {\n          doneCallback.call(this, err);\n          if (domain && this.domain instanceof domain.Domain)\n            this.domain.exit();\n        }\n\n      }\n    }\n  },\n\n  /**\n   * Adds or copies a set of listeners from another list of\n   * listeners or SequentialExecutor object.\n   *\n   * @param listeners [map<String,Array<Function>>, ALY.SequentialExecutor]\n   *   a list of events and callbacks, or an event emitter object\n   *   containing listeners to add to this emitter object.\n   * @return [ALY.SequentialExecutor] the emitter object, for chaining.\n   * @example Adding listeners from a map of listeners\n   *   emitter.addListeners({\n   *     event1: [function() { ... }, function() { ... }],\n   *     event2: [function() { ... }]\n   *   });\n   *   emitter.emit('event1'); // emitter has event1\n   *   emitter.emit('event2'); // emitter has event2\n   * @example Adding listeners from another emitter object\n   *   var emitter1 = new ALY.SequentialExecutor();\n   *   emitter1.on('event1', function() { ... });\n   *   emitter1.on('event2', function() { ... });\n   *   var emitter2 = new ALY.SequentialExecutor();\n   *   emitter2.addListeners(emitter1);\n   *   emitter2.emit('event1'); // emitter2 has event1\n   *   emitter2.emit('event2'); // emitter2 has event2\n   */\n  addListeners: function addListeners(listeners) {\n    var self = this;\n\n    // extract listeners if parameter is an SequentialExecutor object\n    if (listeners._events) listeners = listeners._events;\n\n    ALY.util.each(listeners, function(event, callbacks) {\n      if (typeof callbacks === 'function') callbacks = [callbacks];\n      ALY.util.arrayEach(callbacks, function(callback) {\n        self.on(event, callback);\n      });\n    });\n\n    return self;\n  },\n\n  /**\n   * Registers an event with {on} and saves the callback handle function\n   * as a property on the emitter object using a given `name`.\n   *\n   * @param name [String] the property name to set on this object containing\n   *   the callback function handle so that the listener can be removed in\n   *   the future.\n   * @param (see on)\n   * @return (see on)\n   * @example Adding a named listener DATA_CALLBACK\n   *   var listener = function() { doSomething(); };\n   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);\n   *\n   *   // the following prints: true\n   *   console.log(emitter.DATA_CALLBACK == listener);\n   */\n  addNamedListener: function addNamedListener(name, eventName, callback) {\n    this[name] = callback;\n    this.addListener(eventName, callback);\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {\n    callback._isAsync = true;\n    return this.addNamedListener(name, eventName, callback);\n  },\n\n  /**\n   * Helper method to add a set of named listeners using\n   * {addNamedListener}. The callback contains a parameter\n   * with a handle to the `addNamedListener` method.\n   *\n   * @callback callback function(add)\n   *   The callback function is called immediately in order to provide\n   *   the `add` function to the block. This simplifies the addition of\n   *   a large group of named listeners.\n   *   @param add [Function] the {addNamedListener} function to call\n   *     when registering listeners.\n   * @example Adding a set of named listeners\n   *   emitter.addNamedListeners(function(add) {\n   *     add('DATA_CALLBACK', 'data', function() { ... });\n   *     add('OTHER', 'otherEvent', function() { ... });\n   *     add('LAST', 'lastEvent', function() { ... });\n   *   });\n   *\n   *   // these properties are now set:\n   *   emitter.DATA_CALLBACK;\n   *   emitter.OTHER;\n   *   emitter.LAST;\n   */\n  addNamedListeners: function addNamedListeners(callback) {\n    var self = this;\n    callback(\n      function() {\n        self.addNamedListener.apply(self, arguments);\n      },\n      function() {\n        self.addNamedAsyncListener.apply(self, arguments);\n      }\n    );\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  unhandledErrorCallback: function unhandledErrorCallback(err) {\n    if (err) {\n      if (domain && this.domain instanceof domain.Domain) {\n        err.domainEmitter = this;\n        err.domain = this.domain;\n        err.domainThrown = false;\n        this.domain.emit('error', err);\n      } else {\n        throw err;\n      }\n    }\n  }\n});\n\n/**\n * {on} is the prefered method.\n * @api private\n */\nALY.SequentialExecutor.prototype.addListener = ALY.SequentialExecutor.prototype.on;\nALY.SequentialExecutor.prototype.addAsyncListener = ALY.SequentialExecutor.prototype.onAsync;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/event_listeners.js":"var ALY = require('./core');\nrequire('./sequential_executor');\nrequire('./service_interface/json');\nrequire('./service_interface/query');\nrequire('./service_interface/rest');\nrequire('./service_interface/rest_json');\nrequire('./service_interface/rest_xml');\nrequire('./service_interface/pop');\nrequire('./service_interface/top');\n\nALY.EventListeners = {\n  Core: {}\n};\n\nALY.EventListeners = {\n  Core: new ALY.SequentialExecutor().addNamedListeners(function(add, addAsync) {\n\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      var rules = req.service.api.operations[req.operation].input;\n      new ALY.ParamValidator().validate(rules, req.params);\n    });\n\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        var length = ALY.util.string.byteLength(req.httpRequest.body);\n        req.httpRequest.headers['Content-Length'] = length;\n      }\n    });\n\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      if (!req.service.api.signatureVersion) return done(); // none\n\n      var credentials = req.service.config.getCredentials();\n\n      try {\n        var date = ALY.util.date.getDate();\n        var SignerClass = req.service.getSignerClass(req);\n        var signer = new SignerClass(req.httpRequest, req.service.api.signingName);\n\n        // add new authorization\n        signer.addAuthorization(credentials, date);\n      } catch (e) {\n        req.response.error = e;\n      }\n      done();\n    });\n\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = ALY.util.error(new Error(),\n          {code: 'UnknownError', message: 'An unknown error occurred.'});\n      }\n    });\n\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n        resp.httpResponse._abortCallback = done;\n\n        httpResp.on('headers', function onHeaders(statusCode, headers) {\n          resp.request.emit('httpHeaders', [statusCode, headers, resp]);\n\n          if (!resp.request.httpRequest._streaming) {\n            if (ALY.HttpClient.streamsApiVersion === 2) { // streams2 API check\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else { // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n\n        httpResp.on('end', function onEnd() {\n          resp.request.emit('httpDone');\n          done();\n        });\n      }\n\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(progress) {\n          resp.request.emit('httpUploadProgress', [progress, resp]);\n        });\n\n        httpResp.on('receiveProgress', function onReceiveProgress(progress) {\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        });\n      }\n\n      function error(err) {\n        resp.error = ALY.util.error(err, {\n          code: 'NetworkingError',\n          region: resp.request.httpRequest.region,\n          hostname: resp.request.httpRequest.endpoint.hostname,\n          retryable: true\n        });\n        resp.request.emit('httpError', [resp.error, resp], function() {\n          done();\n        });\n      }\n\n      resp.error = null;\n      resp.data = null;\n\n      var http = ALY.HttpClient.getInstance();\n      var httpOptions = resp.request.service.config.httpOptions || {};\n      this.httpRequest.debug();\n      var s = http.handleRequest(this.httpRequest, httpOptions, callback, error);\n      progress(s);\n    });\n\n    add('HTTP_HEADERS', 'httpHeaders',\n        function HTTP_HEADERS(statusCode, headers, resp) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = new ALY.util.Buffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n    });\n\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (ALY.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = { loaded: resp.httpResponse.numBytes, total: total };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n\n        resp.httpResponse.buffers.push(new ALY.util.Buffer(chunk));\n      }\n    });\n\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = ALY.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n\n  }),\n\n  Logger: new ALY.SequentialExecutor().addNamedListeners(function(add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n\n      function buildMessage() {\n        var time = ALY.util.date.getDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n        var params = require('util').inspect(req.params, true, true);\n\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[ALY ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + req.operation + '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n\n      var message = buildMessage();\n      if (typeof logger.log === 'function') {\n        logger.log(message);\n      } else if (typeof logger.write === 'function') {\n        logger.write(message + '\\n');\n      }\n    });\n  }),\n\n  Json: new ALY.SequentialExecutor().addNamedListeners(function(add) {\n    var svc = ALY.ServiceInterface.Json;\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Rest: new ALY.SequentialExecutor().addNamedListeners(function(add) {\n    var svc = ALY.ServiceInterface.Rest;\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestJson: new ALY.SequentialExecutor().addNamedListeners(function(add) {\n    var svc = ALY.ServiceInterface.RestJson;\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Pop: new ALY.SequentialExecutor().addNamedListeners(function(add) {\n    var svc = ALY.ServiceInterface.Pop;\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Top: new ALY.SequentialExecutor().addNamedListeners(function(add) {\n    var svc = ALY.ServiceInterface.Top;\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestXml: new ALY.SequentialExecutor().addNamedListeners(function(add) {\n    var svc = ALY.ServiceInterface.RestXml;\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Query: new ALY.SequentialExecutor().addNamedListeners(function(add) {\n    var svc = ALY.ServiceInterface.Query;\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/service_interface/json.js":"var ALY = require('../core');\nrequire('../json/builder');\n\n/**\n * @api private\n */\nALY.ServiceInterface.Json = {\n  buildRequest: function buildRequest(req) {\n    var httpRequest = req.httpRequest;\n    var api = req.service.api;\n    var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n    var version = api.jsonVersion || '1.0';\n\n    var rules = api.operations[req.operation].input;\n    var builder = new ALY.JSON.Builder(rules, api);\n\n    httpRequest.path = '/';\n    httpRequest.body = builder.build(req.params || {});\n    httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n    httpRequest.headers['X-Amz-Target'] = target;\n  },\n\n  extractError: function extractError(resp) {\n    var error = {};\n    var httpResponse = resp.httpResponse;\n\n    if (httpResponse.body.length > 0) {\n      var e = JSON.parse(httpResponse.body.toString());\n      if (e.__type || e.code) {\n        error.code = (e.__type || e.code).split('#').pop();\n      } else {\n        error.code = 'UnknownError';\n      }\n      if (error.code === 'RequestEntityTooLarge') {\n        error.message = 'Request body must be less than 1 MB';\n      } else {\n        error.message = (e.message || e.Message || null);\n      }\n    } else {\n      error.code = httpResponse.statusCode;\n      error.message = null;\n    }\n\n    resp.error = ALY.util.error(new Error(), error);\n  },\n\n  extractData: function extractData(resp) {\n    resp.data = JSON.parse(resp.httpResponse.body.toString() || '{}');\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/json/builder.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\n/**\n * @api private\n */\nALY.JSON = {};\n\n/**\n * @api private\n */\nALY.JSON.Builder = inherit({\n\n  constructor: function JSONBuilder(rules, options) {\n    this.rules = rules;\n    this.timestampFormat = options.timestampFormat;\n  },\n\n  build: function build(params) {\n    return JSON.stringify(this.translate(this.rules, params));\n  },\n\n  translate: function translate(rules, value) {\n    if (value === null || value === undefined) return undefined;\n\n    if (rules.type == 'structure') {\n\n      // translate structures (hashes with pre-defined keys)\n      var struct = {};\n      ALY.util.each.call(this, value, function (memberName, memberValue) {\n        var memberRules = rules.members[memberName] || {};\n        var result = this.translate(memberRules, memberValue);\n        if (result !== undefined) struct[memberName] = result;\n      });\n      return struct;\n\n    } else if (rules.type == 'list') {\n\n      // translate each member of the list\n      var list = [];\n      ALY.util.arrayEach.call(this, value, function (memberValue) {\n        var memberRules = rules.members || {};\n        var result = this.translate(memberRules, memberValue);\n        if (result !== undefined) list.push(result);\n      });\n      return list;\n\n    } else if (rules.type == 'map') {\n\n      // translate maps (hashes with user supplied keys)\n      var map = {};\n      ALY.util.each.call(this, value, function (memberName, memberValue) {\n        var memberRules = rules.members || {};\n        var result = this.translate(memberRules, memberValue);\n        if (result !== undefined) map[memberName] = result;\n      });\n      return map;\n\n    } else if (rules.type == 'timestamp') {\n\n      var timestampFormat = rules.format || this.timestampFormat;\n      return ALY.util.date.format(value, timestampFormat);\n\n    } else if (rules.type == 'integer') {\n      return parseInt(value, 10);\n    } else if (rules.type == 'float') {\n      return parseFloat(value);\n    } else {\n\n      // all other shapes\n      return value;\n\n    }\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/service_interface/query.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\n// 目前 query 是针对 top 调用的\nALY.ServiceInterface.Query = {\n  buildRequest: function buildRequest(req) {\n    var operation = req.service.api.operations[req.operation];\n    var httpRequest = req.httpRequest;\n    httpRequest.method = 'GET';\n    httpRequest.headers['Content-Type'] =\n      'application/x-www-form-urlencoded; charset=utf-8';\n    httpRequest.params = {\n      Action: operation.name,\n      Version: req.service.api.apiVersion,\n      Timestamp: ALY.util.date.iso8601(ALY.util.date.getDate()),\n      Format: 'json',\n      AccessKeyId: req.service.config.accessKeyId,\n      SignatureVersion: '1.0',\n      SignatureMethod: 'HMAC-SHA1',\n      SignatureNonce: ALY.util.uuid()\n    };\n\n    // convert the request parameters into a list of query params,\n    // e.g. Deeply.NestedParam.0.Name=value\n    var rules = operation.input;\n    if (rules) rules = rules.members;\n    var builder = new ALY.QueryParamSerializer(rules, req.service.api);\n    builder.serialize(req.params, function(name, value) {\n      httpRequest.params[name] = value;\n    });\n    httpRequest.path = '/?' + ALY.util.queryParamsToString(httpRequest.params);\n  },\n\n  extractError: function extractError(resp) {\n    var data = JSON.parse(resp.httpResponse.body.toString());\n\n    if (data.Code) {\n      resp.error = ALY.util.error(new Error(), {\n        code: data.Code,\n        message: data.Message,\n        RequestId: data.RequestId\n      });\n    } else {\n      resp.error = ALY.util.error(new Error(), {\n        code: resp.httpResponse.statusCode,\n        message: null,\n        RequestId: data.RequestId\n      });\n    }\n  },\n\n  extractData: function extractData(resp) {\n    resp.data = resp.httpResponse.body.toString();\n  }\n};\n\n/**\n * @api private\n */\nALY.QueryParamSerializer = inherit({\n\n  constructor: function QueryParamSerializer(rules, options) {\n    this.rules = rules;\n    this.timestampFormat = options ? options.timestampFormat : 'iso8601';\n  },\n\n  serialize: function serialize(params, fn) {\n    this.serializeStructure('', params, this.rules, fn);\n  },\n\n  serializeStructure: function serializeStructure(prefix, struct, rules, fn) {\n    var that = this;\n    ALY.util.each(struct, function (name, member) {\n      var n = rules[name].name || name;\n      var memberName = prefix ? prefix + '.' + n : n;\n      that.serializeMember(memberName, member, rules[name], fn);\n    });\n  },\n\n  serializeMap: function serialzeMap(name, map, rules, fn) {\n    var i = 1;\n    var that = this;\n    ALY.util.each(map, function (key, value) {\n      var prefix = rules.flattened ? '.' : '.entry.';\n      var position = prefix + (i++) + '.';\n      var keyName = position + (rules.keys.name || 'key');\n      var valueName = position + (rules.members.name || 'value');\n      that.serializeMember(name + keyName, key, rules.keys, fn);\n      that.serializeMember(name + valueName, value, rules.members, fn);\n    });\n  },\n\n  serializeList: function serializeList(name, list, rules, fn) {\n    var that = this;\n    var memberRules = rules.members || {};\n    ALY.util.arrayEach(list, function (v, n) {\n      var suffix = '.' + (n + 1);\n      if (rules.flattened) {\n        if (memberRules.name) {\n          var parts = name.split('.');\n          parts.pop();\n          parts.push(memberRules.name);\n          name = parts.join('.');\n        }\n      } else {\n        suffix = '.member' + suffix;\n      }\n      that.serializeMember(name + suffix, v, memberRules, fn);\n    });\n  },\n\n  serializeMember: function serializeMember(name, value, rules, fn) {\n    if (value === null || value === undefined) return;\n    if (rules.type === 'structure') {\n      this.serializeStructure(name, value, rules.members, fn);\n    } else if (rules.type === 'list') {\n      this.serializeList(name, value, rules, fn);\n    } else if (rules.type === 'map') {\n      this.serializeMap(name, value, rules, fn);\n    } else if (rules.type === 'timestamp') {\n      var timestampFormat = rules.format || this.timestampFormat;\n      fn.call(this, name, ALY.util.date.format(value, timestampFormat));\n    } else {\n      fn.call(this, name, String(value));\n    }\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/service_interface/rest.js":"var ALY = require('../core');\n\n/**\n * @api private\n */\nALY.ServiceInterface.Rest = {\n  buildRequest: function buildRequest(req) {\n    ALY.ServiceInterface.Rest.populateMethod(req);\n    ALY.ServiceInterface.Rest.populateURI(req);\n    ALY.ServiceInterface.Rest.populateHeaders(req);\n  },\n\n  extractError: function extractError() {\n  },\n\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    var data = {};\n    var r = resp.httpResponse;\n    var operation = req.service.api.operations[req.operation];\n    var rules = (operation.output || {}).members || {};\n\n    // normalize headers names to lower-cased keys for matching\n    var headers = {};\n    ALY.util.each(r.headers, function (k, v) {\n      headers[k.toLowerCase()] = v;\n    });\n\n    ALY.util.each(rules, function (name, rule) {\n      if (rule.location === 'header') {\n        var header = (rule.name || name).toLowerCase();\n        if (rule.type == 'map') {\n          data[name] = {};\n          ALY.util.each(r.headers, function (k, v) {\n            var result = k.match(new RegExp('^' + rule.name + '(.+)', 'i'));\n            if (result !== null) {\n              data[name][result[1]] = v;\n            }\n          });\n        }\n        if (headers[header] !== undefined) {\n          data[name] = headers[header];\n        }\n      }\n      if (rule.location === 'status') {\n        data[name] = parseInt(r.statusCode, 10);\n      }\n    });\n\n    resp.data = data;\n  },\n\n  populateMethod: function populateMethod(req) {\n    req.httpRequest.method = req.service.api.operations[req.operation].http.method;\n  },\n\n  populateURI: function populateURI(req) {\n    var operation = req.service.api.operations[req.operation];\n    var uri = operation.http.uri;\n    var pathPattern = uri.split(/\\?/)[0];\n    var rules = (operation.input || {}).members || {};\n\n    var escapePathParam = req.service.escapePathParam ||\n      ALY.ServiceInterface.Rest.escapePathParam;\n    var escapeQuerystringParam = req.service.escapeQuerystringParam ||\n      ALY.ServiceInterface.Rest.escapeQuerystringParam;\n\n    ALY.util.each.call(this, rules, function (name, rule) {\n      if (rule.location == 'uri' && req.params[name] != null) {\n        // if the value is being inserted into the path portion of the\n        // URI, then we need to use a different (potentially) escaping\n        // pattern, this is especially true for S3 path params like Key.\n        var value = pathPattern.match('{' + name + '}') ?\n          escapePathParam(req.params[name]) :\n          escapeQuerystringParam(req.params[name]);\n\n        uri = uri.replace('{' + name + '}', value);\n      }\n    });\n\n    var path = uri.split('?')[0];\n    var querystring = uri.split('?')[1];\n\n    if (querystring) {\n      var parts = [];\n      ALY.util.arrayEach(querystring.split('&'), function (part) {\n        if (!part.match('{\\\\w+}')) parts.push(part);\n      });\n      uri = (parts.length > 0 ? path + '?' + parts.join('&') : path);\n    } else {\n      uri = path;\n    }\n\n    req.httpRequest.path = uri;\n  },\n\n  escapePathParam: function escapePathParam(value) {\n    return ALY.util.uriEscape(String(value));\n  },\n\n  escapeQuerystringParam: function escapeQuerystringParam(value) {\n    return ALY.util.uriEscape(String(value));\n  },\n\n  populateHeaders: function populateHeaders(req) {\n    var operation = req.service.api.operations[req.operation];\n    var rules = (operation.input || {}).members || {};\n\n    ALY.util.each.call(this, rules, function (name, rule) {\n      if (rule.location === 'header' && req.params[name]) {\n        if (rule.type === 'map') {\n          ALY.util.each(req.params[name], function (key, value) {\n            req.httpRequest.headers[rule.name + key] = value;\n          });\n        } else {\n          var value = req.params[name];\n          if (rule.type === 'timestamp') {\n            var timestampFormat = rule.format || req.service.api.timestampFormat;\n            value = ALY.util.date.format(value, timestampFormat);\n          }\n          req.httpRequest.headers[rule.name || name] = value;\n        }\n      }\n    });\n\n    if(req.service.config.securityToken) {\n      req.httpRequest.headers[\"x-oss-security-token\"] = req.service.config.securityToken;\n    }\n\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/service_interface/rest_json.js":"var ALY = require('../core');\nrequire('./rest');\nrequire('./json');\n\n/**\n * @api private\n */\nALY.ServiceInterface.RestJson = {\n  buildRequest: function buildRequest(req) {\n    ALY.ServiceInterface.Rest.buildRequest(req);\n    ALY.ServiceInterface.RestJson.populateBody(req);\n  },\n\n  extractError: function extractError(resp) {\n    ALY.ServiceInterface.Json.extractError(resp);\n  },\n\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    var rules = req.service.api.operations[req.operation].output || {};\n    if (rules.payload && rules.members[rules.payload]) {\n      if (rules.members[rules.payload].streaming) {\n        resp.data[rules.payload] = resp.httpResponse.body;\n      } else {\n        resp.data[rules.payload] = resp.httpResponse.body.toString();\n      }\n    } else {\n      var data = resp.data;\n      ALY.ServiceInterface.Json.extractData(resp);\n      resp.data = ALY.util.merge(data, resp.data);\n    }\n  },\n\n  populateBody: function populateBody(req) {\n    var input = req.service.api.operations[req.operation].input;\n    var payload = input.payload;\n    var params = {};\n\n    if (typeof payload === 'string') {\n\n      var rules = input.members[payload];\n      params = req.params[payload];\n\n      if (params === undefined) return;\n\n      if (rules.type === 'structure') {\n        req.httpRequest.body = this.buildJSON(params, input, req.service.api);\n      } else {\n        // non-xml paylaod\n        req.httpRequest.body = params;\n      }\n\n    } else if (payload) {\n\n      ALY.util.arrayEach(payload, function (param) {\n        if (req.params[param] !== undefined) {\n          params[param] = req.params[param];\n        }\n      });\n      req.httpRequest.body = this.buildJSON(params, input, req.service.api);\n\n    }\n  },\n\n  buildJSON: function buildJSON(params, rules, api) {\n    var builder = new ALY.JSON.Builder(rules, api);\n    return builder.build(params);\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/service_interface/rest_xml.js":"var ALY = require('../core');\nrequire('../xml/builder');\nrequire('../xml/parser');\nrequire('./rest');\n\n/**\n * @api private\n */\nALY.ServiceInterface.RestXml = {\n  buildRequest: function buildRequest(req) {\n    ALY.ServiceInterface.Rest.buildRequest(req);\n    ALY.ServiceInterface.RestXml.populateBody(req);\n  },\n\n  extractError: function extractError(resp) {\n    try {\n      var data = new ALY.XML.Parser({}).parse(resp.httpResponse.body.toString());\n      if (data.Errors) data = data.Errors;\n      if (data.Error) data = data.Error;\n      if (data.Code) {\n        resp.error = ALY.util.error(new Error(), {\n          code: data.Code,\n          message: data.Message\n        });\n      } else {\n        resp.error = ALY.util.error(new Error(), {\n          code: resp.httpResponse.statusCode,\n          message: null\n        });\n      }\n    }\n    catch(err) {\n      resp.error = ALY.util.error(new Error(), {\n        code: resp.httpResponse.statusCode,\n        message: resp.httpResponse.body.toString()\n      });\n    }\n  },\n\n  extractData: function extractData(resp) {\n    ALY.ServiceInterface.Rest.extractData(resp);\n\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    var operation = req.service.api.operations[req.operation];\n    var rules = operation.output.members;\n\n    var output = operation.output;\n    var payload = output.payload;\n\n    if (payload) {\n      if (rules[payload].streaming) {\n        resp.data[payload] = httpResponse.body;\n      } else {\n        resp.data[payload] = httpResponse.body.toString();\n      }\n    } else if (httpResponse.body.length > 0) {\n      try {\n        var parser = new ALY.XML.Parser(operation.output || {});\n        ALY.util.update(resp.data, parser.parse(httpResponse.body.toString()));\n      }\n      catch(err) {\n        // ignore parse error\n      }\n    }\n\n    // extract request id\n    resp.data.RequestId = httpResponse.headers['x-oss-request-id'] ||\n                          httpResponse.headers['x-oss-requestid'];\n  },\n\n  populateBody: function populateBody(req) {\n    var input = req.service.api.operations[req.operation].input;\n    var payload = input.payload;\n    var rules = {};\n    var builder = null;\n    var params = req.params;\n\n    if (typeof payload === 'string') {\n\n      rules = input.members[payload];\n      params = params[payload];\n\n      if (params === undefined) return;\n\n      if (rules.type === 'structure') {\n        builder = new ALY.XML.Builder(payload, rules.members, req.service.api);\n        req.httpRequest.body = builder.toXML(params);\n      } else {\n        // non-xml paylaod\n        req.httpRequest.body = params;\n      }\n\n    } else if (payload) {\n\n      ALY.util.arrayEach(payload, function (member) {\n        rules[member] = input.members[member];\n      });\n\n      builder = new ALY.XML.Builder(input.wrapper, rules, req.service.api);\n      req.httpRequest.body = builder.toXML(params);\n\n    }\n\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/xml/builder.js":"var ALY = require('../core');\nvar builder = require('xmlbuilder');\nvar inherit = ALY.util.inherit;\n\n/**\n * @api private\n */\nALY.XML.Builder = inherit({\n\n  constructor: function XMLBuilder(root, rules, options) {\n    this.root = root;\n    this.rules = rules;\n    this.xmlns = options.xmlnamespace;\n    this.timestampFormat = options.timestampFormat;\n  },\n\n  toXML: function toXML(params) {\n    var xml = builder.create(this.root);\n    if (this.xmlns) xml.att('xmlns', this.xmlns);\n    this.serializeStructure(this.rules, params, xml);\n    return xml.root().toString();\n  },\n\n  serializeStructure: function serializeStructure(rules, params, xml) {\n    ALY.util.each.call(this, rules || {}, function (memberName, memberRules) {\n      var value = params[memberName];\n      if (value !== undefined) {\n        if (memberRules.attribute) {\n          xml.att(memberRules.name, value);\n        } else {\n          this.serializeMember(memberName, memberRules, value, xml);\n        }\n      }\n    });\n  },\n\n  serializeList: function serializeList(name, rules, list, xml) {\n    if (rules.flattened) {\n      ALY.util.arrayEach.call(this, list, function (value) {\n        this.serializeMember(rules.name || name, rules.members, value, xml);\n      });\n    } else {\n      xml = xml.ele(rules.name || name);\n      ALY.util.arrayEach.call(this, list, function (value) {\n        var memberName = rules.members.name || 'member';\n        this.serializeMember(memberName, rules.members, value, xml);\n      });\n    }\n  },\n\n  serializeMember: function serializeMember(memberName, rules, params, xml) {\n    if (params === null || params === undefined) return;\n\n    var name = memberName;\n    if (rules.type === 'structure') {\n      xml = xml.ele(name);\n      this.serializeStructure(rules.members, params, xml);\n    } else if (rules.type === 'list') {\n      this.serializeList(name, rules, params, xml);\n    } else if (rules.type === 'timestamp') {\n      var timestampFormat = rules.format || this.timestampFormat;\n      var date = ALY.util.date.format(params, timestampFormat);\n      xml = xml.ele(name, String(date));\n    } else {\n      xml = xml.ele(name, String(params));\n    }\n    this.applyNamespaces(xml, rules);\n  },\n\n  applyNamespaces: function applyNamespaces(xml, rules) {\n    if (rules.xmlns) {\n      var attr = 'xmlns';\n      if (rules.xmlns.prefix) attr += ':' + rules.xmlns.prefix;\n      xml.att(attr, rules.xmlns.uri);\n    }\n  }\n\n\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/xml/parser.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\nvar xml2js = require('xml2js');\n\n/**\n * @api private\n */\nALY.XML.Parser = inherit({\n\n  constructor: function XMLParser(rules) {\n    this.rules = (rules || {}).members || {};\n  },\n\n  // options passed to xml2js parser\n  options: {\n    explicitCharkey: false, // undocumented\n    trim: false,            // trim the leading/trailing whitespace from text nodes\n    normalize: false,       // trim interior whitespace inside text nodes\n    explicitRoot: false,    // return the root node in the resulting object?\n    emptyTag: null,         // the default value for empty nodes\n    explicitArray: true,    // always put child nodes in an array\n    ignoreAttrs: false,     // ignore attributes, only create text nodes\n    mergeAttrs: false,      // merge attributes and child elements\n    validator: null         // a callable validator\n  },\n\n  parse: function parse(xml) {\n\n    var result = null;\n    var error = null;\n    var parser = new xml2js.Parser(this.options);\n    parser.parseString(xml, function (e, r) {\n      error = e;\n      result = r;\n    });\n\n    if (result) {\n      delete result.xmlns;\n      return this.parseStructure(result, this.rules);\n    } else if (error) {\n      throw ALY.util.error(error, {code: 'XMLParserError'});\n    } else { // empty xml document\n      return this.parseStructure({}, this.rules);\n    }\n\n  },\n\n  parseStructure: function parseStructure(structure, rules) {\n    var data = {};\n\n    // force array members to always be present\n    ALY.util.each.call(this, rules, function(memberName, memberRules) {\n      if (memberRules.type == 'list') {\n        data[memberRules.name || memberName] = [];\n      }\n    });\n\n    ALY.util.each.call(this, structure, function (xmlName, value) {\n      if (xmlName == '$') {\n        ALY.util.each.call(this, value, function (attrName, attrValue) {\n          if (rules[attrName]) {\n            var rule = rules[attrName];\n            data[rule.name || xmlName] = this.parseMember([attrValue], rule);\n          }\n        });\n      } else {\n        var rule = rules[xmlName] || {};\n        data[rule.name || xmlName] = this.parseMember(value, rule);\n      }\n    });\n\n    return data;\n  },\n\n  parseMap: function parseMap(map, rules) {\n    var data = {};\n    var keyRules = rules.keys || {};\n    var valueRules = rules.members || {};\n    var keyName = keyRules.name || 'key';\n    var valueName = valueRules.name || 'value';\n    if (!rules.flattened) {\n      map = map[0].entry;\n    }\n    ALY.util.arrayEach.call(this, map, function (entry) {\n      var value = this.parseMember(entry[valueName], valueRules);\n      data[entry[keyName][0]] = value;\n    });\n    return data;\n  },\n\n  parseList: function parseList(list, rules) {\n    var data = [];\n    var memberRules = rules.members || {};\n    var memberName = memberRules.name || 'member';\n    if (rules.flattened) {\n      ALY.util.arrayEach.call(this, list, function (value) {\n        data.push(this.parseMember([value], memberRules));\n      });\n    } else {\n      ALY.util.arrayEach.call(this, list, function (member) {\n        ALY.util.arrayEach.call(this, member[memberName], function (value) {\n          data.push(this.parseMember([value], memberRules));\n        });\n      });\n    }\n    return data;\n  },\n\n  parseMember: function parseMember(values, rules) {\n    /*jshint maxcomplexity:20*/\n\n    if (values[0] === null) {\n      if (rules.type === 'structure') return {};\n      if (rules.type === 'list') return [];\n      if (rules.type === 'map') return {};\n      return null;\n    }\n\n    if (values[0]['$'] && values[0]['$'].encoding == 'base64') {\n      return ALY.util.base64.decode(values[0]['_']);\n    }\n\n    if (!rules.type) {\n      if (typeof values[0] === 'string') {\n        rules.type = 'string';\n      } else if (values[0]['_']) {\n        rules.type = 'string';\n        values = [values[0]['_']];\n      } else {\n        rules.type = 'structure';\n      }\n    }\n\n    if (rules.type === 'string') {\n\n      return values[0];\n\n    } else if (rules.type === 'structure') {\n\n      return this.parseStructure(values[0], rules.members || {});\n\n    } else if (rules.type === 'list') {\n\n      return this.parseList(values, rules);\n\n    } else if (rules.type === 'map') {\n\n      return this.parseMap(values, rules);\n\n    } else if (rules.type === 'integer') {\n\n      return parseInt(values[0], 10);\n\n    } else if (rules.type === 'float') {\n\n      return parseFloat(values[0]);\n\n    } else if (rules.type === 'timestamp') {\n\n      return this.parseTimestamp(values[0]);\n\n    } else if (rules.type === 'boolean') {\n\n      return values[0] === 'true';\n\n    } else {\n\n      var msg = 'unhandled type: ' + rules.type;\n      throw ALY.util.error(new Error(msg), {code: 'XMLParserError'});\n\n    }\n\n  },\n\n  parseTimestamp: function parseTimestamp(value) {\n\n    if (value.match(/^\\d+$/)) { // unix timestamp\n\n      return new Date(value * 1000);\n\n    } else if (value.match(/^\\d{4}/)) { // iso8601\n\n      return new Date(value);\n\n    } else if (value.match(/^\\w{3},/)) { // rfc822\n\n      return new Date(value);\n\n    } else {\n\n      throw ALY.util.error(\n        new Error('unhandled timestamp format: ' + value),\n        {code: 'TimestampParserError'});\n\n    }\n\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/service_interface/pop.js":"var ALY = require('../core');\nrequire('./rest');\nrequire('./json');\n\nfunction randomNumbers(count) {\n  var num = '';\n  for (var i = 0; i < count; i++) {\n    num += Math.floor(Math.random() * 10);\n  }\n  return num;\n}\n\n/**\n * @api private\n */\nALY.ServiceInterface.Pop = {\n  buildRequest: function buildRequest(req) {\n    ALY.ServiceInterface.Rest.buildRequest(req);\n    ALY.ServiceInterface.Pop.populateBody(req);\n  },\n\n  extractError: function extractError(resp) {\n    ALY.ServiceInterface.Json.extractError(resp);\n  },\n\n  extractData: function extractData(resp) {\n    resp.data = JSON.parse(resp.httpResponse.body.toString());\n  },\n\n  populateBody: function populateBody(req) {\n    req.httpRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n    var body = req.params;\n    var date = ALY.util.date.getDate();\n\n    body.Format = \"JSON\";\n    body.Version = req.service.api.apiVersion;\n    body.AccessKeyId = req.service.config.accessKeyId;\n    body.SignatureVersion = \"1.0\";\n    body.SignatureMethod = \"HMAC-SHA1\";\n    body.SignatureNonce = String(date.getTime()) + randomNumbers(4);\n    body.Timestamp = ALY.util.date.iso8601(date);\n\n    // sign\n    var headers = [];\n\n    ALY.util.each(body, function (name) {\n      headers.push(name);\n    });\n\n    headers.sort(function (a, b) {\n      return a < b ? -1 : 1;\n    });\n\n    var canonicalizedQueryString = \"\";\n    ALY.util.arrayEach.call(this, headers, function (name) {\n      canonicalizedQueryString += \"&\" + name + \"=\" + ALY.util.popEscape(body[name]);\n    });\n\n    var stringToSign = 'POST&%2F&' + ALY.util.popEscape(canonicalizedQueryString.substr(1));\n    body.Signature = ALY.util.crypto.hmac(req.service.config.secretAccessKey + '&', stringToSign, 'base64', 'sha1');\n\n    // body\n    var bodyString = ALY.util.queryParamsToString(body);\n\n    req.httpRequest.body = bodyString;\n  },\n\n  buildJSON: function buildJSON(params, rules, api) {\n    var builder = new ALY.JSON.Builder(rules, api);\n    return builder.build(params);\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/service_interface/top.js":"var ALY = require('../core');\nrequire('./rest');\nrequire('./json');\n\n/**\n * @api private\n */\nALY.ServiceInterface.Top = {\n  buildRequest: function buildRequest(req) {\n    ALY.ServiceInterface.Top.populateMethod(req);\n    ALY.ServiceInterface.Top.populateBodyAndURI(req);\n  },\n\n  extractError: function extractError(resp) {\n    ALY.ServiceInterface.Json.extractError(resp);\n  },\n\n  extractData: function extractData(resp) {\n    resp.data = JSON.parse(resp.httpResponse.body.toString());\n  },\n\n  populateMethod: function populateBodyAndURI(req) {\n    req.httpRequest.method = req.service.api.operations[req.operation].http.method;\n  },\n\n  populateBodyAndURI: function populateBody(req) {\n    req.httpRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n    req.httpRequest.headers['Cache-Control'] = \"no-cache\";\n    req.httpRequest.headers['Connection'] = \"Keep-Alive\";\n\n    var application_parameter = req.params;\n\n    // convert json object to json string\n    ALY.util.each(application_parameter, function (name) {\n      var value = application_parameter[name];\n      if(value !== null && typeof value === 'object') {\n        application_parameter[name] = JSON.stringify(value);\n      }\n    });\n\n    var sys_parameters = {\n      format: \"json\",\n      app_key: req.service.config.accessKeyId,\n      sign_method: \"md5\",\n      v: \"2.0\",\n      timestamp: ALY.util.date.unixMilliseconds(ALY.util.date.getDate()),\n      partner_id: \"taobao-sdk-python-20151223\",\n      method: application_parameter.method\n    };\n\n    delete application_parameter.method;\n\n    // sign\n    var sign_parameter = [];\n\n    ALY.util.each(sys_parameters, function (name) {\n      sign_parameter.push(name);\n    });\n\n    ALY.util.each(application_parameter, function (name) {\n      sign_parameter.push(name);\n    });\n\n    sign_parameter.sort(function (a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    });\n\n    var canonicalizedQueryString = \"\";\n    ALY.util.arrayEach.call(this, sign_parameter, function (name) {\n      canonicalizedQueryString += name + (sys_parameters[name] || application_parameter[name]);\n    });\n\n    var stringToSign = req.service.config.secretAccessKey + canonicalizedQueryString + req.service.config.secretAccessKey;\n\n    sys_parameters.sign = ALY.util.crypto.md5(stringToSign, 'hex').toUpperCase();\n\n    req.httpRequest.body = ALY.util.queryParamsToString(application_parameter);\n\n    req.httpRequest.path = \"/router/rest?\" + ALY.util.queryParamsToString(sys_parameters);\n  },\n\n  buildJSON: function buildJSON(params, rules, api) {\n    var builder = new ALY.JSON.Builder(rules, api);\n    return builder.build(params);\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/request.js":"var ALY = require('./core');\nvar inherit = ALY.util.inherit;\n\nfunction AcceptorStateMachine(states, state) {\n  this.currentState = state || null;\n  this.states = states || {};\n}\n\nAcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {\n  if (typeof finalState === 'function') {\n    inputError = bindObject; bindObject = done;\n    done = finalState; finalState = null;\n  }\n\n  var self = this;\n  var state = self.states[self.currentState];\n  state.fn.call(bindObject || self, inputError, function(err) {\n    if (err) {\n      if (bindObject.logger) bindObject.logger.log(self.currentState, '->', state.fail, err);\n      if (state.fail) self.currentState = state.fail;\n      else return done ? done(err) : null;\n    } else {\n      if (bindObject.logger) bindObject.logger.log(self.currentState, '->', state.accept);\n      if (state.accept) self.currentState = state.accept;\n      else return done ? done() : null;\n    }\n    if (self.currentState === finalState) return done ? done(err) : null;\n\n    self.runTo(finalState, done, bindObject, err);\n  });\n};\n\nAcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {\n  if (typeof acceptState === 'function') {\n    fn = acceptState; acceptState = null; failState = null;\n  } else if (typeof failState === 'function') {\n    fn = failState; failState = null;\n  }\n\n  if (!this.currentState) this.currentState = name;\n  this.states[name] = { accept: acceptState, fail: failState, fn: fn };\n  return this;\n};\n\nvar fsm = new AcceptorStateMachine();\nfsm.setupStates = function() {\n  var hardErrorStates = ['success', 'error', 'complete'];\n  var transition = function transition(err, done) {\n    try {\n      var self = this;\n      var origError = self.response.error;\n      self.emit(self._asm.currentState, function() {\n        if (self.response.error && origError != self.response.error) {\n          if (hardErrorStates.indexOf(this._asm.currentState) >= 0) {\n            this._hardError = true;\n          }\n        }\n        done(self.response.error);\n      });\n\n    } catch (e) {\n      this.response.error = e;\n      if (hardErrorStates.indexOf(this._asm.currentState) >= 0) {\n        this._hardError = true;\n      }\n      done(e);\n    }\n  };\n\n  this.addState('validate', 'build', 'error', transition);\n  this.addState('restart', 'build', 'error', function(err, done) {\n    err = this.response.error;\n    if (!err) return done();\n    if (!err.retryable) return done(err);\n\n    if (this.response.retryCount < this.service.config.maxRetries) {\n      this.response.retryCount++;\n      done();\n    } else {\n      done(err);\n    }\n  });\n  this.addState('build', 'afterBuild', 'restart', transition);\n  this.addState('afterBuild', 'sign', 'restart', transition);\n  this.addState('sign', 'send', 'retry', transition);\n  this.addState('retry', 'afterRetry', 'afterRetry', transition);\n  this.addState('afterRetry', 'sign', 'error', transition);\n  this.addState('send', 'validateResponse', 'retry', transition);\n  this.addState('validateResponse', 'extractData', 'extractError', transition);\n  this.addState('extractError', 'extractData', 'retry', transition);\n  this.addState('extractData', 'success', 'retry', transition);\n  this.addState('success', 'complete', 'complete', transition);\n  this.addState('error', 'complete', 'complete', transition);\n  this.addState('complete', null, 'uncaughtException', transition);\n  this.addState('uncaughtException', function(err, done) {\n    try {\n      ALY.SequentialExecutor.prototype.unhandledErrorCallback.call(this, err);\n    } catch (e) {\n      if (this._hardError) throw err;\n    }\n    done(err);\n  });\n};\nfsm.setupStates();\n\nALY.Request = inherit({\n\n  /**\n   * Creates a request for an operation on a given service with\n   * a set of input parameters.\n   *\n   * @param service [ALY.Service] the service to perform the operation on\n   * @param operation [String] the operation to perform on the service\n   * @param params [Object] parameters to send to the operation.\n   *   See the operation's documentation for the format of the\n   *   parameters.\n   */\n  constructor: function Request(service, operation, params) {\n    var endpoint = new ALY.Endpoint(service.config.endpoint);\n    var region = service.config.region;\n\n    this.service = service;\n    this.operation = operation;\n    this.params = params || {};\n    this.httpRequest = new ALY.HttpRequest(endpoint, region);\n    this.startTime = ALY.util.date.getDate();\n\n    this.response = new ALY.Response(this);\n    this.restartCount = 0;\n    this._asm = new AcceptorStateMachine(fsm.states, 'validate');\n\n    ALY.SequentialExecutor.call(this);\n    this.emit = this.emitEvent;\n  },\n\n  /**\n   * @!group Sending a Request\n   */\n\n  /**\n   * @overload send(callback = null)\n   *   Sends the request object.\n   *\n   *   @callback callback function(err, data)\n   *     If a callback is supplied, it is called when a response is returned\n   *     from the service.\n   *     @param err [Error] the error object returned from the request.\n   *       Set to `null` if the request is successful.\n   *     @param data [Object] the de-serialized data returned from\n   *       the request. Set to `null` if a request error occurs.\n   *   @example Sending a request with a callback\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\n   *     request.send(function(err, data) { console.log(err, data); });\n   *   @example Sending a request with no callback (using event handlers)\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\n   *     request.on('complete', function(response) { ... }); // register a callback\n   *     request.send();\n   */\n  send: function send(callback) {\n    if (callback) {\n      this.on('complete', function (resp) {\n        try {\n          callback.call(resp, resp.error, resp.data);\n        } catch (e) {\n          resp.request._hardError = true;\n          throw e;\n        }\n      });\n    }\n    this.runTo();\n\n    return this.response;\n  },\n\n  build: function build(callback) {\n    this._hardError = callback ? false : true;\n    return this.runTo('send', callback);\n  },\n\n  runTo: function runTo(state, done) {\n    this._asm.runTo(state, done, this);\n    return this;\n  },\n\n  /**\n   * Aborts a request, emitting the error and complete events.\n   *\n   * @!macro nobrowser\n   * @example Aborting a request after sending\n   *   var params = {\n   *     Bucket: 'bucket', Key: 'key',\n   *     Body: new Buffer(1024 * 1024 * 5) // 5MB payload\n   *   };\n   *   var request = s3.putObject(params);\n   *   request.send(function (err, data) {\n   *     if (err) console.log(\"Error:\", err.code, err.message);\n   *     else console.log(data);\n   *   });\n   *\n   *   // abort request in 1 second\n   *   setTimeout(request.abort.bind(request), 1000);\n   *\n   *   // prints \"Error: RequestAbortedError Request aborted by user\"\n   * @return [ALY.Request] the same request object, for chaining.\n   * @since v1.4.0\n   */\n  abort: function abort() {\n    this.removeAllListeners('validateResponse');\n    this.removeAllListeners('extractError');\n    this.on('validateResponse', function addAbortedError(resp) {\n      resp.error = ALY.util.error(new Error('Request aborted by user'), {\n         code: 'RequestAbortedError', retryable: false\n      });\n    });\n\n    if (this.httpRequest.stream) { // abort HTTP stream\n      this.httpRequest.stream.abort();\n      this.httpRequest._abortCallback();\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each page of results given a pageable request, calling\n   * the provided callback with each page of data. After all pages have been\n   * retrieved, the callback is called with `null` data.\n   *\n   * @note This operation can generate multiple requests to a service.\n   * @example Iterating over multiple pages of objects in an S3 bucket\n   *   var pages = 1;\n   *   s3.listObjects().eachPage(function(err, data) {\n   *     if (err) return;\n   *     console.log(\"Page\", pages++);\n   *     console.log(data);\n   *   });\n   * @callback callback function(err, data)\n   *   Called with each page of resulting data from the request.\n   *\n   *   @param err [Error] an error object, if an error occurred.\n   *   @param data [Object] a single page of response data. If there is no\n   *     more data, this object will be `null`.\n   *   @return [Boolean] if the callback returns `false`, pagination will\n   *     stop.\n   *\n   * @api experimental\n   * @see ALY.Request.eachItem\n   * @see ALY.Response.nextPage\n   * @since v1.4.0\n   */\n  eachPage: function eachPage(callback) {\n    function wrappedCallback(response) {\n      var result = callback.call(response, response.error, response.data);\n      if (result === false) return;\n\n      if (response.hasNextPage()) {\n        response.nextPage().on('complete', wrappedCallback).send();\n      } else {\n        callback.call(response, null, null);\n      }\n    }\n\n    this.on('complete', wrappedCallback).send();\n  },\n\n  /**\n   * Enumerates over individual items of a request, paging the responses if\n   * necessary.\n   *\n   * @api experimental\n   * @since v1.4.0\n   */\n  eachItem: function eachItem(callback) {\n    function wrappedCallback(err, data) {\n      if (err) return callback(err, null);\n      if (data === null) return callback(null, null);\n\n      var config = this.request.service.paginationConfig(this.request.operation);\n      var resultKey = config.resultKey;\n      if (Array.isArray(resultKey)) resultKey = resultKey[0];\n      var results = ALY.util.jamespath.query(resultKey, data);\n      ALY.util.arrayEach(results, function(result) {\n        ALY.util.arrayEach(result, function(item) { callback(null, item); });\n      });\n    }\n\n    this.eachPage(wrappedCallback);\n  },\n\n  /**\n   * @return [Boolean] whether the operation can return multiple pages of\n   *   response data.\n   * @api experimental\n   * @see ALY.Response.eachPage\n   * @since v1.4.0\n   */\n  isPageable: function isPageable() {\n    return this.service.paginationConfig(this.operation) ? true : false;\n  },\n\n  /**\n   * Converts the request object into a readable stream that\n   * can be read from or piped into a writable stream.\n   *\n   * @note The data read from a readable stream contains only\n   *   the raw HTTP body contents.\n   * @example Manually reading from a stream\n   *   request.createReadStream().on('data', function(data) {\n   *     console.log(\"Got data:\", data.toString());\n   *   });\n   * @example Piping a request body into a file\n   *   var out = fs.createWriteStream('/path/to/outfile.jpg');\n   *   s3.service.getObject(params).createReadStream().pipe(out);\n   * @return [Stream] the readable stream object that can be piped\n   *   or read from (by registering 'data' event listeners).\n   */\n  createReadStream: function createReadStream() {\n    var streams = require('stream');\n    var req = this;\n    var stream = null;\n    var legacyStreams = false;\n\n    if (ALY.HttpClient.streamsApiVersion === 2) {\n      stream = new streams.Readable();\n      stream._read = function() { stream.push(''); };\n    } else {\n      stream = new streams.Stream();\n      stream.readable = true;\n    }\n\n    stream.sent = false;\n    stream.on('newListener', function(event) {\n      if (!stream.sent && (event === 'data' || event === 'readable')) {\n        if (event === 'data') legacyStreams = true;\n        stream.sent = true;\n        process.nextTick(function() { req.send(function() { }); });\n      }\n    });\n\n    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {\n      if (statusCode < 300) {\n        this.httpRequest._streaming = true;\n\n        req.removeListener('httpData', ALY.EventListeners.Core.HTTP_DATA);\n        req.removeListener('httpError', ALY.EventListeners.Core.HTTP_ERROR);\n        req.on('httpError', function streamHttpError(error, resp) {\n          resp.error = error;\n          resp.error.retryable = false;\n        });\n\n        var httpStream = resp.httpResponse.stream;\n        stream.response = resp;\n        stream._read = function() {\n          var data;\n          /*jshint boss:true*/\n          while (data = httpStream.read()) {\n            stream.push(data);\n          }\n          stream.push('');\n        };\n\n        var events = ['end', 'error', (legacyStreams ? 'data' : 'readable')];\n        ALY.util.arrayEach(events, function(event) {\n          httpStream.on(event, function(arg) {\n            stream.emit(event, arg);\n          });\n        });\n      }\n    });\n\n    this.on('error', function(err) {\n      stream.emit('error', err);\n    });\n\n    return stream;\n  },\n\n  /**\n   * @param [Array,Response] args This should be the response object,\n   *   or an array of args to send to the event.\n   * @api private\n   */\n  emitEvent: function emit(eventName, args, done) {\n    if (typeof args === 'function') { done = args; args = null; }\n    if (!done) done = this.unhandledErrorCallback;\n    if (!args) args = this.eventParameters(eventName, this.response);\n\n    var origEmit = ALY.SequentialExecutor.prototype.emit;\n    origEmit.call(this, eventName, args, function (err) {\n      if (err) this.response.error = err;\n      done.call(this, err);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  eventParameters: function eventParameters(eventName) {\n    switch (eventName) {\n      case 'validate':\n      case 'sign':\n      case 'build':\n      case 'afterBuild':\n        return [this];\n      case 'error':\n        return [this.response.error, this.response];\n      default:\n        return [this.response];\n    }\n  }\n});\n\nALY.util.mixin(ALY.Request, ALY.SequentialExecutor);\n\nALY.Response = inherit({\n\n  /**\n   * @api private\n   */\n  constructor: function Response(request) {\n    this.request = request;\n    this.data = null;\n    this.error = null;\n    this.retryCount = 0;\n    this.redirectCount = 0;\n    this.httpResponse = new ALY.HttpResponse();\n  },\n\n  nextPage: function nextPage(callback) {\n    var config;\n    var service = this.request.service;\n    var operation = this.request.operation;\n    try {\n      config = service.paginationConfig(operation, true);\n    } catch (e) { this.error = e; }\n\n    if (!this.hasNextPage()) {\n      if (callback) callback(this.error, null);\n      else if (this.error) throw this.error;\n      return null;\n    }\n\n    var params = ALY.util.copy(this.request.params);\n    if (!this.nextPageTokens) {\n      return callback ? callback(null, null) : null;\n    } else {\n      var inputTokens = config.inputToken;\n      if (typeof inputTokens === 'string') inputTokens = [inputTokens];\n      for (var i = 0; i < inputTokens.length; i++) {\n        params[inputTokens[i]] = this.nextPageTokens[i];\n      }\n      return service.makeRequest(this.request.operation, params, callback);\n    }\n  },\n\n  /**\n   * @return [Boolean] whether more pages of data can be returned by further\n   *   requests\n   * @api experimental\n   * @since v1.4.0\n   */\n  hasNextPage: function hasNextPage() {\n    this.cacheNextPageTokens();\n    if (this.nextPageTokens) return true;\n    if (this.nextPageTokens === undefined) return undefined;\n    else return false;\n  },\n\n  /**\n   * @api private\n   */\n  cacheNextPageTokens: function cacheNextPageTokens() {\n    if (this.hasOwnProperty('nextPageTokens')) return this.nextPageTokens;\n    this.nextPageTokens = undefined;\n\n    var config = this.request.service.paginationConfig(this.request.operation);\n    if (!config) return this.nextPageTokens;\n\n    this.nextPageTokens = null;\n    if (config.moreResults) {\n      if (!ALY.util.jamespath.find(config.moreResults, this.data)) {\n        return this.nextPageTokens;\n      }\n    }\n\n    var exprs = config.outputToken;\n    if (typeof exprs === 'string') exprs = [exprs];\n    ALY.util.arrayEach.call(this, exprs, function (expr) {\n      var output = ALY.util.jamespath.find(expr, this.data);\n      if (output) {\n        this.nextPageTokens = this.nextPageTokens || [];\n        this.nextPageTokens.push(output);\n      }\n    });\n\n    return this.nextPageTokens;\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/request_signer.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\n/**\n * @api private\n */\nALY.Signers.RequestSigner = inherit({\n  constructor: function RequestSigner(request) {\n    this.request = request;\n  }\n});\n\nALY.Signers.RequestSigner.getVersion = function getVersion(version) {\n  switch (version) {\n    case 'oss': return ALY.Signers.OSS;\n    case 'ots': return ALY.Signers.OTS;\n    case 'sls': return ALY.Signers.SLS;\n    case 'top': return ALY.Signers.TOP;\n    case 'pop': return ALY.Signers.POP;\n    case 'opensearch': return ALY.Signers.OpenSearch;\n    case 'batchcompute': return ALY.Signers.BatchCompute;\n    case 'cms': return ALY.Signers.CMS;\n  }\n  throw new Error('Unknown signing version ' + version);\n};\n\nrequire('./oss');\nrequire('./ots');\nrequire('./sls');\nrequire('./opensearch');\nrequire('./top');\nrequire('./pop');\nrequire('./batchcompute');\nrequire('./cms');","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/oss.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\n/**\n * @api private\n */\nALY.Signers.OSS = inherit(ALY.Signers.RequestSigner, {\n\n  subResources: {\n    'acl': 1,\n    'cors': 1,\n    'lifecycle': 1,\n    'delete': 1,\n    'location': 1,\n    'logging': 1,\n    'notification': 1,\n    'partNumber': 1,\n    'policy': 1,\n    'requestPayment': 1,\n    'restore': 1,\n    'tagging': 1,\n    'torrent': 1,\n    'uploadId': 1,\n    'uploads': 1,\n    'versionId': 1,\n    'versioning': 1,\n    'versions': 1,\n    'website': 1\n  },\n\n  // when building the stringToSign, these querystring params should be\n  // part of the canonical resource string with their NON-encoded values\n  responseHeaders: {\n    'response-content-type': 1,\n    'response-content-language': 1,\n    'response-expires': 1,\n    'response-cache-control': 1,\n    'response-content-disposition': 1,\n    'response-content-encoding': 1\n  },\n\n  addAuthorization: function addAuthorization(credentials, date) {\n    if (!this.request.headers['presigned-expires']) {\n      // 在浏览器中不能设置 date header\n      if(ALY.util.isBrowser()) {\n        this.request.headers['x-oss-date'] = ALY.util.date.rfc822(date);\n      }\n      else {\n        this.request.headers['Date'] = ALY.util.date.rfc822(date);\n      }\n    }\n\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());\n    var auth = 'OSS ' + credentials.accessKeyId + ':' + signature;\n\n    this.request.headers['Authorization'] = auth;\n  },\n\n  stringToSign: function stringToSign() {\n    var r = this.request;\n\n    var parts = [];\n    parts.push(r.method);\n    parts.push(r.headers['Content-MD5'] || '');\n    parts.push(r.headers['Content-Type'] || '');\n\n    // This is the \"Date\" header, but we use X-Amz-Date.\n    // The S3 signing mechanism requires us to pass an empty\n    // string for this Date header regardless.\n    // this works:\n    // getSignedUrl use 'presigned-expires'\n    // other request use 'Date'\n    parts.push(r.headers['presigned-expires'] || r.headers['x-oss-date'] || r.headers['Date'] || '');\n\n    var headers = this.canonicalizedHeaders();\n    if (headers) parts.push(headers);\n    parts.push(this.canonicalizedResource());\n\n    return parts.join('\\n');\n\n  },\n\n  canonicalizedHeaders: function canonicalizedHeaders() {\n\n    var headers = [];\n\n    ALY.util.each(this.request.headers, function (name) {\n      if (name.match(/^x-oss-/i))\n        headers.push(name);\n    });\n\n    headers.sort(function (a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    });\n\n    var parts = [];\n    ALY.util.arrayEach.call(this, headers, function (name) {\n      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));\n    });\n\n    return parts.join('\\n');\n\n  },\n\n  canonicalizedResource: function canonicalizedResource() {\n\n    var r = this.request;\n\n    var parts = r.path.split('?');\n    var path = parts[0];\n    var querystring = parts[1];\n\n    var resource = '';\n\n    if (r.virtualHostedBucket)\n      resource += '/' + r.virtualHostedBucket;\n\n    // OSS 遗留问题，header 中的 Key 不能 url encode\n    resource += decodeURIComponent(path);\n\n    if (querystring) {\n\n      // collect a list of sub resources and query params that need to be signed\n      var resources = [];\n\n      ALY.util.arrayEach.call(this, querystring.split('&'), function (param) {\n        var name = param.split('=')[0];\n        var value = param.split('=')[1];\n        if (this.subResources[name] || this.responseHeaders[name]) {\n          var subresource = { name: name };\n          if (value !== undefined) {\n            if (this.subResources[name]) {\n              subresource.value = value;\n            } else {\n              subresource.value = decodeURIComponent(value);\n            }\n          }\n          resources.push(subresource);\n        }\n      });\n\n      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });\n\n      if (resources.length) {\n\n        querystring = [];\n        ALY.util.arrayEach(resources, function (res) {\n          if (res.value === undefined)\n            querystring.push(res.name);\n          else\n            querystring.push(res.name + '=' + res.value);\n        });\n\n        resource += '?' + querystring.join('&');\n      }\n\n    }\n\n    return resource;\n\n  },\n\n  sign: function sign(secret, string) {\n    if(process.env.DEBUG == 'aliyun') {\n      console.log('----------- sign string start -----------');\n      console.log(string);\n      console.log('----------- sign string end -----------');\n    }\n    return ALY.util.crypto.hmac(secret, string, 'base64', 'sha1');\n  }\n});\n\nmodule.exports = ALY.Signers.OSS;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/ots.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\n/**\n * @api private\n */\nALY.Signers.OTS = inherit(ALY.Signers.RequestSigner, {\n\n  subResources: {\n    'acl': 1,\n    'cors': 1,\n    'lifecycle': 1,\n    'delete': 1,\n    'location': 1,\n    'logging': 1,\n    'notification': 1,\n    'partNumber': 1,\n    'policy': 1,\n    'requestPayment': 1,\n    'restore': 1,\n    'tagging': 1,\n    'torrent': 1,\n    'uploadId': 1,\n    'uploads': 1,\n    'versionId': 1,\n    'versioning': 1,\n    'versions': 1,\n    'website': 1\n  },\n\n  // when building the stringToSign, these querystring params should be\n  // part of the canonical resource string with their NON-encoded values\n  responseHeaders: {\n    'response-content-type': 1,\n    'response-content-language': 1,\n    'response-expires': 1,\n    'response-cache-control': 1,\n    'response-content-disposition': 1,\n    'response-content-encoding': 1\n  },\n\n  addAuthorization: function addAuthorization(credentials, date) {\n    this.request.headers['x-ots-date'] = ALY.util.date.rfc822(date);\n    this.request.headers['x-ots-accesskeyid'] = credentials.accessKeyId;\n\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());\n\n    this.request.headers['x-ots-signature'] = signature;\n  },\n\n  stringToSign: function stringToSign() {\n    var r = this.request;\n\n    var parts = [];\n\n    parts.push(r.path);\n\n    parts.push(r.method + '\\n');\n\n    var headers = this.canonicalizedHeaders();\n    if (headers) parts.push(headers);\n    //parts.push(this.canonicalizedResource());\n\n    return parts.join('\\n') + '\\n';\n  },\n\n  canonicalizedHeaders: function canonicalizedHeaders() {\n\n    var headers = [];\n\n    ALY.util.each(this.request.headers, function (name) {\n      if (name.match(/^x-ots-/i))\n        headers.push(name);\n    });\n\n    headers.sort(function (a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    });\n\n    var parts = [];\n    ALY.util.arrayEach.call(this, headers, function (name) {\n      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));\n    });\n\n    return parts.join('\\n');\n\n  },\n\n  canonicalizedResource: function canonicalizedResource() {\n\n    var r = this.request;\n\n    var parts = r.path.split('?');\n    var path = parts[0];\n    var querystring = parts[1];\n\n    var resource = '';\n\n    if (r.virtualHostedBucket)\n      resource += '/' + r.virtualHostedBucket;\n\n    // OSS 遗留问题，header 中的 Key 不能 url encode\n    resource += decodeURIComponent(path);\n\n    if (querystring) {\n\n      // collect a list of sub resources and query params that need to be signed\n      var resources = [];\n\n      ALY.util.arrayEach.call(this, querystring.split('&'), function (param) {\n        var name = param.split('=')[0];\n        var value = param.split('=')[1];\n        if (this.subResources[name] || this.responseHeaders[name]) {\n          var subresource = { name: name };\n          if (value !== undefined) {\n            if (this.subResources[name]) {\n              subresource.value = value;\n            } else {\n              subresource.value = decodeURIComponent(value);\n            }\n          }\n          resources.push(subresource);\n        }\n      });\n\n      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });\n\n      if (resources.length) {\n\n        querystring = [];\n        ALY.util.arrayEach(resources, function (res) {\n          if (res.value === undefined)\n            querystring.push(res.name);\n          else\n            querystring.push(res.name + '=' + res.value);\n        });\n\n        resource += '?' + querystring.join('&');\n      }\n\n    }\n\n    return resource;\n\n  },\n\n  sign: function sign(secret, string) {\n    if(process.env.DEBUG == 'aliyun') {\n      console.log('----------- sign string start -----------');\n      console.log(string);\n      console.log('----------- sign string end -----------');\n    }\n    return ALY.util.crypto.hmac(secret, string, 'base64', 'sha1');\n  }\n});\n\nmodule.exports = ALY.Signers.OSS;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/sls.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n/**\n * @api private\n */\nALY.Signers.SLS = inherit(ALY.Signers.RequestSigner, {\n\n\n  // when building the stringToSign, these querystring params should be\n  // part of the canonical resource string with their NON-encoded values\n  responseHeaders: {\n    'response-content-type': 1,\n    'response-content-language': 1,\n    'response-expires': 1,\n    'response-cache-control': 1,\n    'response-content-disposition': 1,\n    'response-content-encoding': 1\n  },\n\n  addAuthorization: function addAuthorization(credentials, date) {\n    this.request.headers['Date'] = ALY.util.date.rfc822(date);\n\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());\n    var auth = 'LOG ' + credentials.accessKeyId + ':' + signature;\n\n    this.request.headers['Authorization'] = auth;\n  },\n\n  stringToSign: function stringToSign() {\n    var r = this.request;\n\n    var parts = [];\n    parts.push(r.method);\n    parts.push(r.headers['Content-MD5'] || '');\n    parts.push(r.headers['Content-Type'] || '');\n\n    // This is the \"Date\" header, but we use X-Amz-Date.\n    // The S3 signing mechanism requires us to pass an empty\n    // string for this Date header regardless.\n    // this works:\n    // getSignedUrl use 'presigned-expires'\n    // other request use 'Date'\n    parts.push(r.headers['Date'] || '');\n\n    var headers = this.canonicalizedAmzHeaders();\n    if (headers) parts.push(headers);\n    parts.push(this.canonicalizedResource());\n\n    return parts.join('\\n');\n\n  },\n\n  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {\n\n    var amzHeaders = [];\n\n    ALY.util.each(this.request.headers, function (name) {\n      if (name.match(/^x-log-/i))\n        amzHeaders.push(name);\n    });\n\n    amzHeaders.sort(function (a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    });\n\n    var parts = [];\n    ALY.util.arrayEach.call(this, amzHeaders, function (name) {\n      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));\n    });\n\n    return parts.join('\\n');\n\n  },\n\n  canonicalizedResource: function canonicalizedResource() {\n\n    var r = this.request;\n\n    var parts = r.path.split('?');\n    var path = parts[0];\n    var querystring = parts[1];\n\n    var resource = '';\n\n\n    resource += decodeURIComponent(path);\n\n\n    if (querystring) {\n\n      // collect a list of sub resources and query params that need to be signed\n      var resources = [];\n\n      var arr = querystring.replace(/(^&*)|(&*$)/g,'').split('&');\n\n\n      ALY.util.arrayEach.call(this, arr, function (param) {\n        var kv = param.split('=');\n\n        var name = kv[0];\n        //修复topic中带有 / 等字符，签名报错\n        var value = (kv.length>1)? decodeURIComponent(kv[1]):'';\n        /*jshint undef:false */\n\n        var resource = { name: name };\n        if (value !== undefined) {\n          resource.value = value;\n        }\n        resources.push(resource);\n\n      });\n\n      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });\n\n      if (resources.length) {\n\n        querystring = [];\n        ALY.util.arrayEach(resources, function (resource) {\n          if (resource.value === undefined)\n            querystring.push(resource.name);\n          else\n            querystring.push(resource.name + '=' + resource.value);\n        });\n\n        resource += '?' + querystring.join('&');\n      }\n\n    }\n\n    return resource;\n\n  },\n\n  sign: function sign(secret, string) {\n    if(process.env.DEBUG == 'aliyun') {\n      console.log('----------- sign string start -----------');\n      console.log(string);\n      console.log('----------- sign string end -----------');\n    }\n    return ALY.util.crypto.hmac(secret, string, 'base64', 'sha1');\n  }\n});\n\nmodule.exports = ALY.Signers.SLS;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/opensearch.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\nfunction randomNumbers(count) {\n  var num = '';\n  for (var i = 0; i < count; i++) {\n    num += Math.floor(Math.random() * 10);\n  }\n  return num;\n}\n\n/**\n * @api private\n */\nALY.Signers.OpenSearch = inherit(ALY.Signers.RequestSigner, {\n\n  addAuthorization: function addAuthorization(credentials, date) {\n    // if (!this.request.headers['presigned-expires']) {\n    //   this.request.headers['Date'] = ALY.util.date.rfc822(date);\n    // }\n\n    // if (credentials.sessionToken) {\n    //   // presigned URLs require this header to be lowercased\n    //   this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    // }\n    var date = new Date();\n\n    var globalQuery = {\n      'Version': 'v2',\n      'AccessKeyId': credentials.accessKeyId,\n      'SignatureMethod': 'HMAC-SHA1',\n      'SignatureVersion': '1.0',\n      'SignatureNonce': String(date.getTime()) + randomNumbers(4),\n      'Timestamp': date.toISOString().replace(/\\.\\d{3}/, '')\n    };\n\n    var parts = [];\n    Object.keys(globalQuery).forEach(function(key) {\n      parts.push(key + '=' + encodeURIComponent(globalQuery[key]));\n    });\n    this.request.path += (this.request.path.indexOf('?') == -1? '?' : '&') + parts.join('&');\n\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());\n    this.request.path += '&Signature=' + encodeURIComponent(signature);\n    // var auth = 'OSS ' + credentials.accessKeyId + ':' + signature;\n\n    // this.request.headers['Authorization'] = auth;\n  },\n\n  stringToSign: function stringToSign() {\n    var r = this.request;\n\n    var s = r.method + '&%2F&' + encodeURIComponent(this.canonicalizedQueryString());\n\n    return s;\n  },\n\n  canonicalizedQueryString: function canonicalizedQueryString() {\n\n    var r = this.request;\n    var querystring = r.path.split('?')[1];\n    var resource = '';\n    if (r.body) {\n      querystring += '&' + r.body;\n    }\n\n    if (querystring) {\n\n      // collect a list of sub resources and query params that need to be signed\n      var resources = [];\n\n      ALY.util.arrayEach.call(this, querystring.split('&'), function (param) {\n        var pos = param.indexOf('=');\n        var name = param.slice(0, pos);\n        var value = param.slice(pos + 1);\n\n        var resource = { name: name };\n        if (value !== undefined) {\n          resource.value = decodeURIComponent(value);\n        }\n\n        resources.push(resource);\n      });\n\n      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });\n\n      if (resources.length) {\n\n        querystring = [];\n        ALY.util.arrayEach(resources, function (resource) {\n          if (resource.value === undefined)\n            querystring.push(ALY.util.opensearchEscape(resource.name));\n          else\n            querystring.push(ALY.util.opensearchEscape(resource.name) + '=' + ALY.util.opensearchEscape(resource.value));\n        });\n\n        resource += querystring.join('&');\n      }\n    }\n\n    return resource;\n  },\n\n  sign: function sign(secret, string) {\n    if(process.env.DEBUG == 'aliyun') {\n      console.log('----------- sign string start -----------');\n      console.log(string);\n      console.log('----------- sign string end -----------');\n    }\n    return ALY.util.crypto.hmac(secret + '&', string, 'base64', 'sha1');\n  }\n});\n\nmodule.exports = ALY.Signers.OpenSearch;","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/top.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\nALY.Signers.TOP = inherit(ALY.Signers.RequestSigner, {\n\n  // sign 已经在 service_interface/top 中实现了\n  addAuthorization: function addAuthorization(credentials, date) {\n\n  }\n\n});\n\nmodule.exports = ALY.Signers.TOP;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/pop.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\nALY.Signers.POP = inherit(ALY.Signers.RequestSigner, {\n\n  addAuthorization: function addAuthorization(credentials, date) {\n  },\n\n});\n\nmodule.exports = ALY.Signers.POP;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/batchcompute.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n//var API_VERSION = '2015-11-11';\n//var API_VERSION = '2015-06-30';\n\n/**\n * @api private\n */\nALY.Signers.BatchCompute = inherit(ALY.Signers.RequestSigner, {\n\n  //entry\n  addAuthorization: function addAuthorization(credentials, date) {\n    var headers = this.request.headers;\n\n    //headers['Date'] = ALY.util.date.rfc822(date);\n    headers['x-acs-date'] = ALY.util.date.rfc822(date);\n    //headers['Date'] = new Date().toGMTString();\n\n\n    //var bodyStr;\n    //var body = this.request.body;\n    //if(body){\n    //  bodyStr = typeof(body)=='object'? JSON.stringify(body):body;\n    //  headers['Content-MD5'] = ALY.util.crypto.md5(bodyStr,'hex').toUpperCase();\n    //}\n\n    headers['x-acs-signature-method'] = 'HMAC-SHA1';\n    headers['x-acs-signature-version'] = '1.0';\n    //headers['x-acs-version'] = API_VERSION;\n    headers['x-sdk-client'] = 'node.js/1.0.0';\n    headers['Accept'] = 'application/json';\n\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());\n    var auth = 'acs ' + credentials.accessKeyId + ':' + signature;\n\n    headers['Authorization'] = auth;\n  },\n\n  stringToSign: function stringToSign() {\n    var r = this.request;\n\n    //fix signature not match in browser\n    if(r.method!='GET' && r.method!='HEAD'){\n       r.headers['Content-Type'] = r.headers['Content-Type'] || 'text/plain;charset=UTF-8';\n    }\n\n    var parts = [];\n    parts.push(r.method);\n    parts.push(r.headers['Accept'] || '');\n    parts.push(r.headers['Content-MD5'] || '');\n    parts.push(r.headers['Content-Type'] || '');\n    parts.push(r.headers['x-acs-date'] || r.headers['Date'] ||'');\n\n    var headers = this.canonicalizedAmzHeaders();\n    if (headers) parts.push(headers);\n    parts.push(this.canonicalizedResource());\n\n    return parts.join('\\n');\n  },\n\n  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {\n\n    var acsHeaders = [];\n\n    ALY.util.each(this.request.headers, function (name) {\n      if (name.match(/^x-acs-/i))\n        acsHeaders.push(name);\n    });\n\n    acsHeaders.sort(function (a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    });\n\n    var parts = [];\n    ALY.util.arrayEach.call(this, acsHeaders, function (name) {\n      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));\n    });\n\n    return parts.join('\\n');\n\n  },\n\n  canonicalizedResource: function canonicalizedResource() {\n\n    var r = this.request;\n\n    var parts = r.path.split('?');\n    var path = parts[0];\n    var querystring = parts[1];\n\n    var resource = '';\n\n\n    resource += decodeURIComponent(path);\n\n\n    if (querystring) {\n\n      // collect a list of sub resources and query params that need to be signed\n      var resources = [];\n\n      var arr = querystring.replace(/(^&*)|(&*$)/g,'').split('&');\n\n\n      ALY.util.arrayEach.call(this, arr, function (param) {\n        var kv = param.split('=');\n\n        var name = kv[0];\n\n        var value = (kv.length>1)? decodeURIComponent(kv[1]):'';\n        /*jshint undef:false */\n\n        var resource = { name: name };\n        if (value !== undefined) {\n          resource.value = value;\n        }\n        resources.push(resource);\n\n      });\n\n      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });\n\n      if (resources.length) {\n\n        querystring = [];\n        ALY.util.arrayEach(resources, function (resource) {\n          if (resource.value === undefined)\n            querystring.push(resource.name);\n          else {\n\n            if(resource.value!=null && resource.value!=''){\n              querystring.push(resource.name + '=' + resource.value);\n            }else{\n              querystring.push(resource.name);\n            }\n          }\n        });\n\n        resource += '?' + querystring.join('&');\n      }\n\n    }\n\n    return resource;\n\n  },\n\n  sign: function sign(secret, string) {\n    if(process.env.DEBUG == 'aliyun') {\n      console.log('----------- sign string start -----------');\n      console.log(string);\n      console.log('----------- sign string end -----------');\n    }\n    return ALY.util.crypto.hmac(secret, string, 'base64', 'sha1');\n  }\n});\n\nmodule.exports = ALY.Signers.BatchCompute;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/signers/cms.js":"var ALY = require('../core');\nvar inherit = ALY.util.inherit;\n\nfunction randomNumbers(count) {\n  var num = '';\n  for (var i = 0; i < count; i++) {\n    num += Math.floor(Math.random() * 10);\n  }\n  return num;\n}\n\n/**\n * @api private\n */\nALY.Signers.CMS = inherit(ALY.Signers.RequestSigner, {\n\n  addAuthorization: function addAuthorization(credentials, date) {\n    // if (!this.request.headers['presigned-expires']) {\n    //   this.request.headers['Date'] = ALY.util.date.rfc822(date);\n    // }\n\n    // if (credentials.sessionToken) {\n    //   // presigned URLs require this header to be lowercased\n    //   this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    // }\n    var date = new Date();\n\n    var globalQuery = {\n      'Format': 'JSON',\n      'Version': '2015-10-20',\n      'AccessKeyId': credentials.accessKeyId,\n      'SignatureMethod': 'HMAC-SHA1',\n      'SignatureVersion': '1.0',\n      'SignatureNonce': String(date.getTime()) + randomNumbers(4),\n      'Timestamp': date.toISOString().replace(/\\.\\d{3}/, '')\n    };\n\n    var parts = [];\n    Object.keys(globalQuery).forEach(function(key) {\n      parts.push(key + '=' + encodeURIComponent(globalQuery[key]));\n    });\n    this.request.path += (this.request.path.indexOf('?') == -1? '?' : '&') + parts.join('&');\n\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());\n    this.request.path += '&Signature=' + encodeURIComponent(signature);\n    // var auth = 'OSS ' + credentials.accessKeyId + ':' + signature;\n\n    // this.request.headers['Authorization'] = auth;\n  },\n\n  stringToSign: function stringToSign() {\n    var r = this.request;\n\n    var s = r.method + '&%2F&' + encodeURIComponent(this.canonicalizedQueryString());\n\n    return s;\n  },\n\n  canonicalizedQueryString: function canonicalizedQueryString() {\n    var that = this;\n    var r = this.request;\n    var querystring = r.path.split('?')[1];\n    var resource = '';\n    if (r.body) {\n      querystring += '&' + r.body;\n    }\n\n    if (querystring) {\n\n      // collect a list of sub resources and query params that need to be signed\n      var resources = [];\n\n      ALY.util.arrayEach.call(this, querystring.split('&'), function (param) {\n        var pos = param.indexOf('=');\n        var name = param.slice(0, pos);\n        var value = param.slice(pos + 1);\n\n        var resource = { name: name };\n        if (value !== undefined) {\n          resource.value = decodeURIComponent(value);\n        }\n\n        resources.push(resource);\n      });\n\n      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });\n\n      if (resources.length) {\n\n        querystring = [];\n        ALY.util.arrayEach(resources, function (resource) {\n          if (resource.value === undefined)\n            querystring.push(that.cmsEscape(resource.name));\n          else\n            querystring.push(that.cmsEscape(resource.name) + '=' + that.cmsEscape(resource.value));\n        });\n\n        resource += querystring.join('&');\n      }\n    }\n\n    return resource;\n  },\n\n  cmsEscape: function(clearString) {\n    // http://v8.googlecode.com/svn/trunk/src/uri.js\n    return encodeURIComponent(clearString)\n        .replace(/\\!/gi, '%21')\n        .replace(/\\'/gi, '%27')\n        .replace(/\\(/gi, '%28')\n        .replace(/\\)/gi, '%29')\n        .replace(/\\*/gi, '%2A')\n  },\n\n  sign: function sign(secret, string) {\n    if(process.env.DEBUG == 'aliyun') {\n      console.log('----------- sign string start -----------');\n      console.log(string);\n      console.log('----------- sign string end -----------');\n    }\n    return ALY.util.crypto.hmac(secret + '&', string, 'base64', 'sha1');\n  }\n});\n\nmodule.exports = ALY.Signers.CMS;","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/param_validator.js":"var ALY = require('./core');\n\n/**\n * @api private\n */\nALY.ParamValidator = ALY.util.inherit({\n  validate: function validate(rules, params, context) {\n    var cRules = (rules || {}).members || {};\n    var payload = rules ? rules.xml : null;\n    if (payload) {\n      cRules = ALY.util.merge(cRules, (cRules[payload] || {}).members || {});\n      delete cRules[payload];\n    }\n\n    return this.validateStructure(cRules, params || {}, context || 'params');\n  },\n\n  validateStructure: function validateStructure(rules, params, context) {\n    /*jshint maxcomplexity:12*/\n    this.validateType(context, params, ['object'], 'structure');\n\n    /*jshint forin:false*/\n    for (var paramName in rules) {\n      if (!rules.hasOwnProperty(paramName)) continue;\n      var value = params[paramName];\n      var notSet = value === undefined || value === null;\n      if (notSet) {\n        if (rules[paramName].default) {\n          params[paramName] = rules[paramName].default;\n        }\n        else if (rules[paramName].required) {\n          this.fail('MissingRequiredParameter',\n              'Missing required key \\'' + paramName + '\\' in ' + context);\n        }\n      }\n      //if (rules[paramName].location == 'uri' && value) {\n      //  if (typeof value == 'string' && value.indexOf('/') == 0) {\n      //    this.fail('UnexpectedParameter',\n      //        'the value of ' + paramName + ' can not start with /');\n      //  }\n      //}\n    }\n\n    // validate hash members\n    for (paramName in params) {\n      if (!params.hasOwnProperty(paramName)) continue;\n\n      var paramValue = params[paramName],\n          paramRules = rules[paramName];\n\n      if (paramRules !== undefined) {\n        var memberContext = [context, paramName].join('.');\n        this.validateMember(paramRules, paramValue, memberContext);\n      } else {\n        this.fail('UnexpectedParameter',\n            'Unexpected key \\'' + paramName + '\\' found in ' + context);\n      }\n    }\n\n    return true;\n  },\n\n  validateMember: function validateMember(rules, param, context) {\n    var memberRules = rules.members || {};\n    switch(rules.type) {\n      case 'structure':\n        return this.validateStructure(memberRules, param, context);\n      case 'list':\n        return this.validateList(memberRules, param, context);\n      case 'map':\n        return this.validateMap(memberRules, param, context);\n      default:\n        return this.validateScalar(rules, param, context);\n    }\n  },\n\n  validateList: function validateList(rules, params, context) {\n    this.validateType(context, params, [Array]);\n\n    // validate array members\n    for (var i = 0; i < params.length; i++) {\n      this.validateMember(rules, params[i], context + '[' + i + ']');\n    }\n  },\n\n  validateMap: function validateMap(rules, params, context) {\n    this.validateType(context, params, ['object'], 'map');\n\n    /*jshint forin:false*/\n    for (var param in params) {\n      if (!params.hasOwnProperty(param)) continue;\n      this.validateMember(rules, params[param],\n          context + '[\\'' +  param + '\\']');\n    }\n  },\n\n  validateScalar: function validateScalar(rules, value, context) {\n    /*jshint maxcomplexity:12*/\n    switch (rules.type) {\n      case null:\n      case undefined:\n      case 'string':\n        return this.validateType(context, value, ['string']);\n      case 'base64':\n      case 'binary':\n        return this.validatePayload(context, value);\n      case 'integer':\n      case 'float':\n        return this.validateNumber(context, value);\n      case 'boolean':\n        return this.validateType(context, value, ['boolean']);\n      case 'timestamp':\n        return this.validateType(context, value, [Date,\n              /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/, 'number'],\n            'Date object, ISO-8601 string, or a UNIX timestamp');\n      default:\n        return this.fail('UnkownType', 'Unhandled type ' +\n            rules.type + ' for ' + context);\n    }\n  },\n\n  fail: function fail(code, message) {\n    throw ALY.util.error(new Error(message), {code: code});\n  },\n\n  validateType: function validateType(context, value, acceptedTypes, type) {\n    /*jshint maxcomplexity:14*/\n    if (value === null || value === undefined) return;\n\n    var foundInvalidType = false;\n    for (var i = 0; i < acceptedTypes.length; i++) {\n      if (typeof acceptedTypes[i] === 'string') {\n        if (typeof value === acceptedTypes[i]) return;\n      } else if (acceptedTypes[i] instanceof RegExp) {\n        if ((value || '').toString().match(acceptedTypes[i])) return;\n      } else {\n        if (value instanceof acceptedTypes[i]) return;\n        if (ALY.util.isType(value, acceptedTypes[i])) return;\n        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();\n        acceptedTypes[i] = ALY.util.typeName(acceptedTypes[i]);\n      }\n      foundInvalidType = true;\n    }\n\n    var acceptedType = type;\n    if (!acceptedType) {\n      /*jshint regexp:false*/\n      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');\n    }\n\n    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';\n    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +\n        vowel + ' ' + acceptedType);\n  },\n\n  validateNumber: function validateNumber(context, value) {\n    if (value === null || value === undefined) return;\n    if (typeof value === 'string') {\n      var castedValue = parseFloat(value);\n      if (castedValue.toString() === value) value = castedValue;\n    }\n    return this.validateType(context, value, ['number']);\n  },\n\n  validatePayload: function validatePayload(context, value) {\n    /*jshint maxcomplexity:14*/\n    if (value === null || value === undefined) return;\n    if (typeof value === 'string') return;\n    if (value && typeof value.byteLength === 'number') return; // typed arrays\n    if (ALY.util.isNode()) { // special check for buffer/stream in Node.js\n      var Stream = require('stream').Stream;\n      if (ALY.util.Buffer.isBuffer(value) || value instanceof Stream) return;\n    }\n\n    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];\n    if (value) {\n      for (var i = 0; i < types.length; i++) {\n        if (ALY.util.isType(value, types[i])) return;\n        if (ALY.util.typeName(value.constructor) === types[i]) return;\n      }\n    }\n\n    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +\n        'string, Buffer, Stream, Blob, or typed array object');\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/http/node.js":"var ALY = require('../core');\nvar Stream = require('stream').Stream;\nvar WritableStream = require('stream').Writable;\nvar ReadableStream = require('stream').Readable;\nrequire('../http');\n\n/**\n * @api private\n */\nALY.NodeHttpClient = ALY.util.inherit({\n  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {\n    var endpoint = httpRequest.endpoint;\n    var pathPrefix = '';\n    if (!httpOptions) httpOptions = {};\n\n    var useSSL = endpoint.protocol === 'https:';\n    var http = useSSL ? require('https') : require('http');\n    var options = {\n      host: endpoint.hostname,\n      port: endpoint.port,\n      method: httpRequest.method,\n      headers: httpRequest.headers,\n      path: pathPrefix + httpRequest.path\n    };\n\n    if (useSSL && !httpOptions.agent) {\n      options.agent = this.sslAgent();\n    }\n\n    ALY.util.update(options, httpOptions);\n    delete options.proxy; // proxy isn't an HTTP option\n    delete options.timeout; // timeout isn't an HTTP option\n\n    var stream = http.request(options, function (httpResp) {\n      callback(httpResp);\n      httpResp.emit('headers', httpResp.statusCode, httpResp.headers);\n    });\n    httpRequest.stream = stream; // attach stream to httpRequest\n\n    // timeout support\n    stream.setTimeout(httpOptions.timeout || 0);\n    stream.once('timeout', function() {\n      var msg = 'Connection timed out after ' + httpOptions.timeout + 'ms';\n      errCallback(ALY.util.error(new Error(msg), {code: 'TimeoutError'}));\n\n      // HACK - abort the connection without tripping our error handler\n      // since we already raised our TimeoutError. Otherwise the connection\n      // comes back with ECONNRESET, which is not a helpful error message\n      stream.removeListener('error', errCallback);\n      stream.on('error', function() { });\n      stream.abort();\n    });\n\n    stream.on('error', errCallback);\n    this.writeBody(stream, httpRequest);\n    return stream;\n  },\n\n  writeBody: function writeBody(stream, httpRequest) {\n    var body = httpRequest.body;\n\n    if (body && WritableStream && ReadableStream) { // progress support\n      if (!(body instanceof Stream)) body = this.bufferToStream(body);\n      body.pipe(this.progressStream(stream, httpRequest));\n    }\n\n    if (body instanceof Stream) {\n      body.pipe(stream);\n    } else if (body) {\n      stream.end(body);\n    } else {\n      stream.end();\n    }\n  },\n\n  sslAgent: function sslAgent() {\n    var https = require('https');\n\n    if (!ALY.NodeHttpClient.sslAgent) {\n      ALY.NodeHttpClient.sslAgent = new https.Agent({rejectUnauthorized: true});\n      ALY.NodeHttpClient.sslAgent.setMaxListeners(0);\n\n      // delegate maxSockets to globalAgent\n      Object.defineProperty(ALY.NodeHttpClient.sslAgent, 'maxSockets', {\n        enumerable: true,\n        get: function() { return https.globalAgent.maxSockets; }\n      });\n    }\n    return ALY.NodeHttpClient.sslAgent;\n  },\n\n  progressStream: function progressStream(stream, httpRequest) {\n    var numBytes = 0;\n    var totalBytes = httpRequest.headers['Content-Length'];\n    var writer = new WritableStream();\n    writer._write = function(chunk, encoding, callback) {\n      if (chunk) {\n        numBytes += chunk.length;\n        stream.emit('sendProgress', {\n          loaded: numBytes, total: totalBytes\n        });\n      }\n      callback();\n    };\n    return writer;\n  },\n\n  bufferToStream: function bufferToStream(buffer) {\n    if (!ALY.util.Buffer.isBuffer(buffer)) buffer = new ALY.util.Buffer(buffer);\n\n    var readable = new ReadableStream();\n    var pos = 0;\n    readable._read = function(size) {\n      if (pos >= buffer.length) return readable.push(null);\n\n      var end = pos + size;\n      if (end > buffer.length) end = buffer.length;\n      readable.push(buffer.slice(pos, end));\n      pos = end;\n    };\n\n    return readable;\n  },\n\n  emitter: null\n});\n\n/**\n * @!ignore\n */\n\n/**\n * @api private\n */\nALY.HttpClient.prototype = ALY.NodeHttpClient.prototype;\n\n/**\n * @api private\n */\nALY.HttpClient.streamsApiVersion = ReadableStream ? 2 : 1;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/services.js":"var path = require('path');\nvar fs = require('fs');\nvar ALY = require('./core');\n\n//require('./services/oss');\n//require('./services/sls');\n//require('./services/opensearch');\n//require('./services/batchcompute');\n\n//ALY.ECS = ALY.Service.defineService('ecs', ['2014-05-26']);\n//ALY.RDS = ALY.Service.defineService('rds', ['2014-08-15']);\n//ALY.SLB = ALY.Service.defineService('slb', ['2014-05-15']);\n//ALY.CDN = ALY.Service.defineService('cdn', ['2014-11-11']);\n//ALY.STS = ALY.Service.defineService('sts', ['2015-04-01']);\n\nvar apis = require('./api_loader');\n\n// define services using map\napis.services.forEach(function(identifier) {\n  var name = apis.serviceName(identifier);\n  var versions = apis.serviceVersions(identifier);\n  ALY[name] = ALY.Service.defineService(identifier, versions);\n\n  // load any customizations from lib/services/<svcidentifier>.js\n  var svcFile = path.join(__dirname, 'services', identifier + '.js');\n  if (fs.existsSync(svcFile)) require('./services/' + identifier);\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/api_loader.js":"var fs = require('fs');\nvar path = require('path');\n\nvar apiRoot = path.join(__dirname, '..', 'apis');\nvar serviceMap = {};\nvar serviceIdentifiers = [];\nvar serviceNames = [];\n\nfunction buildServiceMap() {\n  var prefixMap = {};\n  Object.keys(serviceMap).forEach(function(identifier) {\n    serviceMap[identifier].prefix = serviceMap[identifier].prefix || identifier;\n    prefixMap[serviceMap[identifier].prefix] = identifier;\n  });\n\n  fs.readdirSync(apiRoot).forEach(function (file) {\n    var match = file.match(/^(.+?)-(\\d+-\\d+-\\d+)\\.json$/);\n    if (match) {\n      var id = match[1], version = match[2];\n      if (!serviceMap[id]) {\n        serviceMap[id] = {};\n      }\n\n      //console.log(\"loading\", file);\n      serviceMap[id].name = require(apiRoot + \"/\" + file).serviceAbbreviation;\n\n      serviceMap[id].versions = serviceMap[id].versions || [];\n      if (serviceMap[id].versions.indexOf(version) < 0) {\n        serviceMap[id].versions.push(version);\n      }\n    }\n  });\n\n  Object.keys(serviceMap).forEach(function(identifier) {\n    serviceMap[identifier].versions = serviceMap[identifier].versions.sort();\n    serviceIdentifiers.push(identifier);\n    serviceNames.push(serviceMap[identifier].name);\n  });\n}\n\nfunction getServices() {\n  buildServiceMap();\n  return serviceIdentifiers;\n}\n\nfunction getServiceNames() {\n  buildServiceMap();\n  return serviceNames;\n}\n\nfunction serviceVersions(svc) {\n  buildServiceMap();\n  svc = serviceIdentifier(svc);\n  return serviceMap[svc] ? serviceMap[svc].versions : null;\n}\n\nfunction serviceName(svc) {\n  buildServiceMap();\n  svc = serviceIdentifier(svc);\n  return serviceMap[svc] ? serviceMap[svc].name : null;\n}\n\nfunction serviceFile(svc, version) {\n  buildServiceMap();\n  svc = serviceIdentifier(svc);\n  if (!serviceMap[svc]) return null;\n\n  var prefix = serviceMap[svc].prefix || svc;\n  var filePath;\n  ['min', 'api', 'normal'].some(function(testSuffix) {\n    filePath = apiRoot + '/' + prefix.toLowerCase() + '-' + version + '.' +\n        testSuffix + '.json';\n\n    return fs.existsSync(filePath);\n  });\n  return filePath;\n}\n\nfunction serviceIdentifier(svc) {\n  return svc.toLowerCase();\n}\n\nmodule.exports = {\n  serviceVersions: serviceVersions,\n  serviceName: serviceName,\n  serviceIdentifier: serviceIdentifier,\n  serviceFile: serviceFile\n};\n\nObject.defineProperty(module.exports, 'services', {\n  enumerable: true, get: getServices\n});\n\nObject.defineProperty(module.exports, 'serviceNames', {\n  enumerable: true, get: getServiceNames\n});\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/services/batchcompute.js":"var ALY = require('../core');\nvar parseURL = require('url').parse;\n\nALY.BatchCompute = ALY.Service.defineService('batchcompute', ['2015-06-30','2015-11-11'], {\n    /**\n     * @api private\n     */\n    initialize: function initialize(options) {\n        ALY.Service.prototype.initialize.call(this, options);\n    },\n    setupRequestListeners: function setupRequestListeners(request) {\n\n        var that = this;\n        var svc = ALY.ServiceInterface.RestJson;\n\n        request.addListener('build', this.addContentType);\n\n        request.removeListener('extractData', svc.extractData);\n\n        request.addListener('extractError', this.extractError);\n        request.addListener('extractData', function (response) {\n            that.extractData(response, request['operation']);\n        });\n    },\n\n\n    addContentType: function(req){\n        var httpRequest = req.httpRequest;\n        var headers = httpRequest.headers;\n\n        headers['x-acs-version'] = req.service.config.apiVersion;\n\n        if(req.operation==='updateJobPriority'){\n            httpRequest.body = JSON.parse(httpRequest.body).priority+'';\n            headers['Content-Type'] = 'application/octet-stream';\n            //headers['Content-Length']= httpRequest.body.length;\n        }\n    },\n\n\n    extractData: function extractData(resp, operation) {\n\n        resp.data = JSON.parse(resp.httpResponse.body.toString().trim() || '{}');\n\n        var result = resp.data;\n        delete result['RequestId'];\n\n\n        var headers = resp.httpResponse.headers;\n        var reqId = headers['x-acs-request-id'] || headers['request-id'];\n\n\n        resp.data = {\n            code: resp.httpResponse.statusCode,\n            message: headers.status,\n            headers: headers,\n            requestId: reqId || ''\n        };\n\n        if(headers['x-acs-version']=='2015-06-30') {\n\n            switch (operation) {\n                case 'listJobs':\n                    resp.data.data = this.getFormatters().formatJobList(result);\n                    break;\n                case 'getJob':\n                    resp.data.data = this.getFormatters().formatJob(result);\n                    break;\n                case 'getJobDescription':\n                    resp.data.data = this.getFormatters().formatJobDescription(result);\n                    break;\n                case 'listTasks':\n                    resp.data.data = this.getFormatters().formatTaskList(result);\n                    break;\n                case 'listImages':\n                    resp.data.data = this.getFormatters().formatImageList(result);\n                    break;\n                case 'createJob':\n                    resp.data.data = this.getFormatters().formatJob(result);\n                    break;\n            }\n        }\n        else{\n            resp.data.data = result;\n        }\n\n    },\n    getFormatters: function () {\n\n        function getState(state) {\n            switch (state) {\n                case 0:\n                    return 'Init';\n                case 1:\n                    return 'Waiting';\n                case 2:\n                    return 'Running';\n                case 3:\n                    return 'Finished';\n                case 4:\n                    return 'Failed';\n                case 5:\n                    return 'Stopped';\n                default:\n                    return 'Unkowned';\n            }\n        }\n\n        return {\n            formatJob: function (v) {\n\n                v['JobId'] = v['ResourceId'];\n                v['JobName'] = v['Name'];\n                v['CreationTime'] = v['CreateTime'];\n\n                delete v['Name'];\n                delete v['ResourceId'];\n                delete v['CreateTime'];\n\n                if (v['State'] == 'Terminated') v['State'] = 'Finished';\n\n                return v;\n            },\n            formatJobList: function (data) {\n                var that = this;\n                var t = [];\n                Object.keys(data).forEach(function (k) {\n                    t.push(that.formatJob(data[k]));\n                });\n\n                t.sort(function (a, b) {\n                    return a['JobId'] > b['JobId'] ? 1 : -1;\n                });\n                return t;\n            },\n            formatTaskList: function (data) {\n                /*{ CountTask:\n                 { EndTime: 1435520792,\n                 InstanceStatusVector: [Object],\n                 StartTime: 1435519721,\n                 State: 5,\n                 UnfinishedInstances: [Object] } },\n                 */\n                var t = [];\n                Object.keys(data).forEach(function (k) {\n                    var v = data[k];\n                    v['TaskName'] = k;\n                    v['State'] = getState(v['State']);\n                    v['InstanceList'] = v['InstanceStatusVector'];\n\n                    delete v['InstanceStatusVector'];\n                    delete v['UnfinishedInstances'];\n\n                    if (v['InstanceList']) {\n                        v['InstanceList'].forEach(function (n) {\n                            n.State = getState(n.State);\n                            delete n['WorkerStartTime'];\n                            delete n['WorkerEndTime'];\n                        });\n                    }\n                    t.push(data[k]);\n                });\n\n                //sort by StartTime, TaskName\n                t.sort(function (a, b) {\n                    if (a['StartTime'] == 0) {\n                        if (b['StartTime'] == 0) {\n                            return a['TaskName'] > b['TaskName'] ? 1 : -1;\n                        } else {\n                            return -1;\n                        }\n                    } else {\n                        if (b['StartTime'] == 0) {\n                            return -1;\n                        } else {\n                            return a['StartTime'] > b['StartTime'] ? 1 : -1;\n                        }\n                    }\n                });\n                return t;\n            },\n            formatImageList: function (data) {\n                var t = [];\n\n                Object.keys(data).forEach(function (k) {\n                    var v = data[k];\n                    v['ImageId'] = k;\n                    v['ImageName'] = v['Name'];\n\n                    delete v['Name'];\n\n                    t.push(data[k]);\n                });\n\n                t.sort(function (a, b) {\n                    return a['ImageId'] > b['ImageId'] ? 1 : -1;\n                });\n                return t;\n            },\n            formatJobDescription: function (data) {\n                var taskMap = data.TaskDag.TaskDescMap;\n                Object.keys(taskMap).forEach(function (k) {\n                    var v = taskMap[k];\n                    delete v['BlockDeviceMapping'];\n                    delete v['CreateSnapshotAfterTerminated'];\n                    delete v['LoadImage'];\n                    delete v['SaveImage'];\n                    delete v['LoadPreparedData'];\n                    delete v['MaxReplica'];\n                    delete v['MinReplica'];\n                });\n                return data;\n            }\n\n        };\n    },\n\n\n    extractError: function extractError(resp) {\n\n        var headers = resp.httpResponse.headers;\n\n        var body = resp.httpResponse.body;\n        var error = body.toString();\n\n        try {\n            error = JSON.parse(error);\n        } catch (e) {\n            error = {};\n        }\n\n        resp.error = ALY.util.error(new Error(error.Message), {\n            code: error.Code || error.ErrorCode,\n            headers: headers,\n            requestId: headers['x-acs-request-id'] || headers['request-id']\n        });\n    }\n});\n\nmodule.exports = ALY.BatchCompute;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/services/cms.js":"var ALY = require('../core');\nvar parseURL = require('url').parse;\n\nALY.CMS = ALY.Service.defineService('cms', ['2015-10-20'], {\n    /**\n     * @api private\n     */\n    initialize: function initialize(options) {\n        ALY.Service.prototype.initialize.call(this, options);\n    },\n    setupRequestListeners: function setupRequestListeners(request) {\n\n        //request.addListener('build', this.addContentType);\n        request.addListener('extractError', this.extractError);\n        request.addListener('extractData', this.extractData);\n    },\n\n\n    //addContentType: function(req){\n    //    var httpRequest = req.httpRequest;\n    //    var headers = httpRequest.headers;\n    //    headers['x-acs-version'] = req.service.config.apiVersion;\n    //},\n\n    extractData: function extractData(resp) {\n\n        if(process.env.DEBUG == 'aliyun') {\n            console.log(\"-------response status-------\");\n            console.log(resp.httpResponse.statusCode);\n\n            console.log(\"-------response header-------\");\n            console.log(resp.httpResponse.headers);\n\n            console.log(\"-------response body-------\");\n            console.log(resp.httpResponse.body.toString());\n            console.log(\"-------response end-------\");\n        }\n\n\n        resp.data = JSON.parse(resp.httpResponse.body.toString().trim() || '{}');\n\n        var result = resp.data;\n        //delete result['RequestId'];\n\n        //var reqId = resp.httpResponse.headers['request-id'];\n\n        resp.data = {\n            code: resp.httpResponse.statusCode,\n            //message: resp.httpResponse.headers.status,\n            headers: resp.httpResponse.headers\n        };\n\n        resp.data.data = result;\n    },\n\n\n\n    extractError: function extractError(resp) {\n        if(process.env.DEBUG == 'aliyun') {\n            console.log(\"-------response status-------\");\n            console.log(resp.httpResponse.statusCode);\n\n            console.log(\"-------response header-------\");\n            console.log(resp.httpResponse.headers);\n\n            console.log(\"-------response error-------\");\n            console.log(resp.httpResponse.body.toString());\n            console.log(\"-------response end-------\");\n        }\n\n        var headers = resp.httpResponse.headers;\n\n        var error = resp.httpResponse.body.toString();\n\n        try {\n            error = JSON.parse(error);\n        } catch (e) {\n            error = {};\n        }\n\n\n        resp.error = ALY.util.error(new Error(), {\n            code: error.Code,\n            headers: headers\n            //requestId: headers['request-id']\n        });\n    }\n});\n\nmodule.exports = ALY.CMS;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/services/opensearch.js":"var ALY = require('../core');\nvar parseURL = require('url').parse;\n\nALY.OpenSearch = ALY.Service.defineService('opensearch', ['2015-01-01'], {\n  /**\n   * @api private\n   */\n  initialize: function initialize(options) {\n    ALY.Service.prototype.initialize.call(this, options);\n  },\n\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.buildContent);\n    //request.addListener('build', this.populateURI);\n    //\n    //request.addListener('build', this.computeContentMd5);\n    //request.addListener('build', this.computeSha256);\n\n    request.removeListener('validate',\n        ALY.EventListeners.Core.VALIDATE_REGION);\n\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', this.extractData);\n\n    //request.addListener('afterBuild', function (req) {\n    //    //Host in request.header\n    //    console.log(req.httpRequest.headers['projectName'], req.params['projectName']);\n    //\n    //    req.httpRequest.headers['Host'] = req.params['projectName']\n    //       +'.'+req.httpRequest.endpoint.hostname;\n    //    //头中的 projectName 不需要\n    //    delete req.httpRequest.headers['projectName'];\n    //});\n  },\n\n  populateURI: function populateURI(req) {\n    var hostname = req.httpRequest.endpoint.hostname;\n\n    var projectName = req.params['projectName'];\n    var host = projectName + '.' + hostname;\n\n    if (!/^[0-9.]+$/.test(hostname)) {\n      //不是ip,  是域名, 则需要拼接project名\n      var protocol = req.httpRequest.endpoint.protocol;\n      var port = req.httpRequest.endpoint.port;\n\n      //real endpoint\n      var endpointObj = parseURL(protocol + '//' + host + ':' + port);\n\n      ALY.util.update(req.httpRequest, {endpoint: endpointObj});\n      // ALY.util.update(req.service, {endpoint: endpointObj });\n    }\n\n    //final host， 不管是ip还是域名，都要拼接project名\n    req.httpRequest.headers['Host'] = host;\n\n    //头中的 projectName 不需要\n    delete req.httpRequest.headers['projectName'];\n  },\n\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n\n    httpRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n  },\n\n  buildContent: function buildContent(req) {\n    var input = req.service.api.operations[req.operation].input;\n    var payload = input.payload;\n    var params = {};\n\n    // todo: payload 是否有可能为 string\n    if (typeof payload === 'string') {\n\n      var rules = input.members[payload];\n      params = req.params[payload];\n\n      if (params === undefined) return;\n\n      if (rules.type === 'structure') {\n        req.httpRequest.body = this.buildJSON(params, input, req.service.api);\n      } else {\n        // non-xml paylaod\n        req.httpRequest.body = params;\n      }\n\n    } else if (payload) {\n      var arr = [];\n\n      ALY.util.arrayEach(payload, function (param) {\n        if (req.params[param] !== undefined) {\n          params[param] = req.params[param];\n          if(param == 'items') {\n            arr.push(param + '=' + encodeURIComponent(JSON.stringify(req.params[param])));\n          }\n          else {\n            arr.push(param + '=' + req.params[param]);\n          }\n        }\n      });\n\n      req.httpRequest.body = arr.join('&');\n    }\n\n  },\n\n  willComputeChecksums: function willComputeChecksums(req) {\n\n    // // TODO: compute checksums for Stream objects\n    // if (!ALY.util.Buffer.isBuffer(req.httpRequest.body) &&\n    //     typeof req.httpRequest.body !== 'string') {\n    //     return false;\n    // }\n\n    var rules = req.service.api.operations[req.operation].input;\n\n    // // V4 signer uses SHA256 signatures so only compute MD5 if it is required\n    // if (req.service.getSignerClass(req) === ALY.Signers.V4) {\n    //     if (rules.ContentMD5 && !rules.ContentMD5.required) return false;\n    // }\n\n    if (rules.ContentMD5) return true;\n  },\n\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = ALY.util.crypto.md5(req.httpRequest.body, 'hex').toUpperCase();\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  computeSha256: function computeSha256(req) {\n    if (req.service.getSignerClass(req) === ALY.Signers.V4) {\n      req.httpRequest.headers['X-Amz-Content-Sha256'] =\n          ALY.util.crypto.sha256(req.httpRequest.body || '', 'hex');\n    }\n  },\n\n  escapePathParam: function escapePathParam(value) {\n    return ALY.util.uriEscapePath(String(value));\n  },\n\n\n  successfulResponse: function successfulResponse(resp) {\n    //var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    return httpResponse.statusCode < 300;\n  },\n\n  retryableError: function retryableError(error, request) {\n\n    var _super = ALY.Service.prototype.retryableError;\n    return _super.call(this, error, request);\n\n  },\n\n  extractData: function extractData(resp) {\n    ALY.ServiceInterface.Rest.extractData(resp);\n\n    var req = resp.request;\n    var rules = req.service.api.operations[req.operation].output || {};\n    if (rules.payload && rules.members[rules.payload]) {\n      if (rules.members[rules.payload].streaming) {\n        resp.data[rules.payload] = resp.httpResponse.body;\n      } else {\n        resp.data[rules.payload] = resp.httpResponse.body.toString();\n      }\n    } else {\n      var data = resp.data;\n      ALY.ServiceInterface.Json.extractData(resp);\n      resp.data = ALY.util.merge(data, resp.data);\n    }\n  },\n\n  extractError: function extractError(resp) {\n    var error = {};\n    var httpResponse = resp.httpResponse;\n\n    if (httpResponse.body.length > 0) {\n      var e = JSON.parse(httpResponse.body.toString());\n      if (e.__type || e.code) {\n        error.code = (e.__type || e.code).split('#').pop();\n      } else {\n        error.code = 'UnknownError';\n      }\n      if (error.code === 'RequestEntityTooLarge') {\n        error.message = 'Request body must be less than 1 MB';\n      } else {\n        error.message = (e.message || e.Message || null);\n      }\n    } else {\n      error.code = httpResponse.statusCode;\n      error.message = null;\n    }\n\n    resp.error = ALY.util.error(new Error(), error);\n  }\n\n});\n\nmodule.exports = ALY.OpenSearch;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/services/oss.js":"var ALY = require('../core');\n\nALY.OSS = ALY.Service.defineService('oss', ['2013-10-15'], {\n  /**\n   * @api private\n   */\n  initialize: function initialize(options) {\n    ALY.Service.prototype.initialize.call(this, options);\n  },\n\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.populateURI);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', this.extractData);\n  },\n\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n\n    if (b) {\n      // 确保 host 只被 set 一次，因为 endpoint 只在 service 唯一\n      httpRequest.endpoint.host = httpRequest.endpoint.hostname = b + '.' + httpRequest.endpoint.hostname;\n\n      httpRequest.virtualHostedBucket = b;\n      httpRequest.path = httpRequest.path.replace(new RegExp('^/' + b), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n    if (ALY.util.isBrowser() && window.navigator.userAgent.match(/Firefox/)) {\n      if (!httpRequest.headers['Content-Type'].match(/;/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      }\n    }\n  },\n\n  willComputeChecksums: function willComputeChecksums(req) {\n    // TODO: compute checksums for Stream objects\n    //if (!ALY.util.Buffer.isBuffer(req.httpRequest.body) &&\n    //  typeof req.httpRequest.body !== 'string') {\n    //  return false;\n    //}\n\n    var rules = req.service.api.operations[req.operation].input.members;\n\n    if (rules.ContentMD5 && !req.params.ContentMD5) return true;\n  },\n\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = ALY.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * OSS requires that path params not escape forward slashes.\n   *\n   * @api private\n   */\n  escapePathParam: function escapePathParam(value) {\n    return ALY.util.uriEscapePath(String(value));\n  },\n\n  /**\n   * @return [Boolean] whether response contains an error\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    if (req.operation === 'completeMultipartUpload' &&\n      httpResponse.body.toString().match('<Error>'))\n      return false;\n    else\n      return httpResponse.statusCode < 300;\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (request.operation == 'completeMultipartUpload' &&\n      error.statusCode === 200) {\n      return true;\n    } else {\n      var _super = ALY.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    if (req.operation === 'getBucketLocation') {\n      /*jshint regexp:false*/\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      if (match) {\n        delete resp.data['_'];\n        resp.data.LocationConstraint = match[1];\n      }\n    }\n\n    // extract request id\n    resp.data.RequestId = resp.httpResponse.headers['x-oss-request-id'] ||\n        resp.httpResponse.headers['x-oss-requestid'];\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body;\n    if (codes[code] && body.length === 0) {\n      resp.error = ALY.util.error(new Error(), {\n        code: codes[resp.httpResponse.statusCode],\n        message: null,\n        headers: resp.httpResponse.headers\n      });\n    } else {\n      var data;\n      try {\n        data = new ALY.XML.Parser({}).parse(body.toString());\n        resp.error = ALY.util.error(new Error(), {\n          code: data.Code || code,\n          message: data.Message || null,\n          headers: resp.httpResponse.headers\n        });\n      }\n      catch(e) {\n        data = body.toString();\n        resp.error = ALY.util.error(new Error(), {\n          code: code,\n          message: data,\n          headers: resp.httpResponse.headers\n        });\n      }\n    }\n  },\n\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = ALY.util.copy(params || {});\n    var expires = params.Expires || 900;\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n\n    var expiresHeader = 'presigned-expires';\n\n    function signedUrlBuilder() {\n      delete request.httpRequest.headers['User-Agent'];\n\n      if (request.service.getSignerClass() === ALY.Signers.V4) {\n        //if (expires > 604800) { // one week expiry is invalid\n        //  var message = 'getSignedUrl() does not support expiry time greater ' +\n        //    'than a week with SigV4 signing.';\n        //  throw ALY.util.error(new Error(), {\n        //    code: 'InvalidExpiryTime', message: message, retryable: false\n        //  });\n        //}\n        request.httpRequest.headers[expiresHeader] = expires;\n      } else {\n        request.httpRequest.headers[expiresHeader] = parseInt(\n          ALY.util.date.unixSeconds() + expires, 10).toString();\n      }\n    }\n\n    function signedUrlSigner() {\n      var queryParams = {};\n\n      ALY.util.each(request.httpRequest.headers, function (key, value) {\n        if (key === expiresHeader) key = 'Expires';\n        queryParams[key] = value;\n      });\n      delete request.httpRequest.headers[expiresHeader];\n\n      var auth = queryParams['Authorization'].split(' ');\n      if (auth[0] === 'OSS') {\n        auth = auth[1].split(':');\n        queryParams['OSSAccessKeyId'] = auth[0];\n        queryParams['Signature'] = auth[1];\n      }\n      delete queryParams['Authorization'];\n      delete queryParams['Host'];\n\n      // build URL\n      var endpoint = request.httpRequest.endpoint;\n      var parsedUrl = ALY.util.urlParse(request.httpRequest.path);\n      var querystring = ALY.util.queryParamsToString(queryParams);\n      endpoint.pathname = parsedUrl.pathname;\n      endpoint.search = !parsedUrl.search ? querystring :\n        parsedUrl.search + '&' + querystring;\n    }\n\n    request.on('build', signedUrlBuilder);\n    request.on('sign', signedUrlSigner);\n    request.removeListener('build', this.addContentType);\n    request.removeAllListeners('afterBuild');\n    if (!params.Body) { // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', this.computeContentMd5);\n    }\n\n    if (callback) {\n      request.build(function() {\n        if (request.response.error) callback(request.response.error, null);\n        else callback(null, ALY.util.urlFormat(request.httpRequest.endpoint));\n      });\n    } else {\n      request.build();\n      return ALY.util.urlFormat(request.httpRequest.endpoint);\n    }\n  }\n});\n\nmodule.exports = ALY.OSS;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/services/ots.js":"var ALY = require('../core');\nvar ProtoBuf = require(\"protobufjs\");\n\nvar protos = {};\n\nvar capitalizeFirstLetter = function (string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nALY.OTS = ALY.Service.defineService('ots', ['2014-08-08'], {\n  /**\n   * @api private\n   */\n  initialize: function initialize(options) {\n    var builder = ProtoBuf.newBuilder();\n    builder.define(\"ots2\");\n    builder.create(\n        [\n          {\n            \"name\": \"Error\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"code\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"message\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"ColumnType\",\n            \"values\": [\n              {\n                \"name\": \"INF_MIN\",\n                \"id\": 0\n              },\n              {\n                \"name\": \"INF_MAX\",\n                \"id\": 1\n              },\n              {\n                \"name\": \"INTEGER\",\n                \"id\": 2\n              },\n              {\n                \"name\": \"STRING\",\n                \"id\": 3\n              },\n              {\n                \"name\": \"BOOLEAN\",\n                \"id\": 4\n              },\n              {\n                \"name\": \"DOUBLE\",\n                \"id\": 5\n              },\n              {\n                \"name\": \"BINARY\",\n                \"id\": 6\n              }\n            ]\n          },\n          {\n            \"name\": \"ColumnSchema\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"ColumnType\",\n                \"name\": \"type\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"ColumnValue\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"ColumnType\",\n                \"name\": \"type\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int64\",\n                \"name\": \"v_int\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"string\",\n                \"name\": \"v_string\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bool\",\n                \"name\": \"v_bool\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"double\",\n                \"name\": \"v_double\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"bytes\",\n                \"name\": \"v_binary\",\n                \"id\": 6\n              }\n            ]\n          },\n          {\n            \"name\": \"Column\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"ColumnValue\",\n                \"name\": \"value\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"Row\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key_columns\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"attribute_columns\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"TableMeta\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"ColumnSchema\",\n                \"name\": \"primary_key\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"RowExistenceExpectation\",\n            \"values\": [\n              {\n                \"name\": \"IGNORE\",\n                \"id\": 0\n              },\n              {\n                \"name\": \"EXPECT_EXIST\",\n                \"id\": 1\n              },\n              {\n                \"name\": \"EXPECT_NOT_EXIST\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"Condition\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"RowExistenceExpectation\",\n                \"name\": \"row_existence\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"CapacityUnit\",\n            \"fields\": [\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"read\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"write\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"ReservedThroughputDetails\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"CapacityUnit\",\n                \"name\": \"capacity_unit\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"int64\",\n                \"name\": \"last_increase_time\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int64\",\n                \"name\": \"last_decrease_time\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"int32\",\n                \"name\": \"number_of_decreases_today\",\n                \"id\": 4\n              }\n            ]\n          },\n          {\n            \"name\": \"ReservedThroughput\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"CapacityUnit\",\n                \"name\": \"capacity_unit\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"ConsumedCapacity\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"CapacityUnit\",\n                \"name\": \"capacity_unit\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"CreateTableRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"TableMeta\",\n                \"name\": \"table_meta\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"ReservedThroughput\",\n                \"name\": \"reserved_throughput\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"CreateTableResponse\",\n            \"fields\": []\n          },\n          {\n            \"name\": \"UpdateTableRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"ReservedThroughput\",\n                \"name\": \"reserved_throughput\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"UpdateTableResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"ReservedThroughputDetails\",\n                \"name\": \"reserved_throughput_details\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"DescribeTableRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"DescribeTableResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"TableMeta\",\n                \"name\": \"table_meta\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"ReservedThroughputDetails\",\n                \"name\": \"reserved_throughput_details\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"ListTableRequest\",\n            \"fields\": []\n          },\n          {\n            \"name\": \"ListTableResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"table_names\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"DeleteTableRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"DeleteTableResponse\",\n            \"fields\": []\n          },\n          {\n            \"name\": \"GetRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"columns_to_get\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"GetRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"ConsumedCapacity\",\n                \"name\": \"consumed\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"Row\",\n                \"name\": \"row\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"OperationType\",\n            \"values\": [\n              {\n                \"name\": \"PUT\",\n                \"id\": 1\n              },\n              {\n                \"name\": \"DELETE\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"ColumnUpdate\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"OperationType\",\n                \"name\": \"type\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"name\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ColumnValue\",\n                \"name\": \"value\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"UpdateRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"Condition\",\n                \"name\": \"condition\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"ColumnUpdate\",\n                \"name\": \"attribute_columns\",\n                \"id\": 4\n              }\n            ]\n          },\n          {\n            \"name\": \"UpdateRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"ConsumedCapacity\",\n                \"name\": \"consumed\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"PutRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"Condition\",\n                \"name\": \"condition\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"attribute_columns\",\n                \"id\": 4\n              }\n            ]\n          },\n          {\n            \"name\": \"PutRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"ConsumedCapacity\",\n                \"name\": \"consumed\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"DeleteRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"Condition\",\n                \"name\": \"condition\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"DeleteRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"ConsumedCapacity\",\n                \"name\": \"consumed\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"RowInBatchGetRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"TableInBatchGetRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"RowInBatchGetRowRequest\",\n                \"name\": \"rows\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"columns_to_get\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"BatchGetRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"TableInBatchGetRowRequest\",\n                \"name\": \"tables\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"RowInBatchGetRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"bool\",\n                \"name\": \"is_ok\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Error\",\n                \"name\": \"error\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ConsumedCapacity\",\n                \"name\": \"consumed\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Row\",\n                \"name\": \"row\",\n                \"id\": 4\n              }\n            ]\n          },\n          {\n            \"name\": \"TableInBatchGetRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"RowInBatchGetRowResponse\",\n                \"name\": \"rows\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"BatchGetRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"TableInBatchGetRowResponse\",\n                \"name\": \"tables\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"PutRowInBatchWriteRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"Condition\",\n                \"name\": \"condition\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"attribute_columns\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"UpdateRowInBatchWriteRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"Condition\",\n                \"name\": \"condition\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"ColumnUpdate\",\n                \"name\": \"attribute_columns\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"DeleteRowInBatchWriteRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"Condition\",\n                \"name\": \"condition\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"primary_key\",\n                \"id\": 2\n              }\n            ]\n          },\n          {\n            \"name\": \"TableInBatchWriteRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"PutRowInBatchWriteRowRequest\",\n                \"name\": \"put_rows\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"UpdateRowInBatchWriteRowRequest\",\n                \"name\": \"update_rows\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"DeleteRowInBatchWriteRowRequest\",\n                \"name\": \"delete_rows\",\n                \"id\": 4\n              }\n            ]\n          },\n          {\n            \"name\": \"BatchWriteRowRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"TableInBatchWriteRowRequest\",\n                \"name\": \"tables\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"RowInBatchWriteRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"bool\",\n                \"name\": \"is_ok\",\n                \"id\": 1,\n                \"options\": {\n                  \"default\": true\n                }\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"Error\",\n                \"name\": \"error\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"ConsumedCapacity\",\n                \"name\": \"consumed\",\n                \"id\": 3\n              }\n            ]\n          },\n          {\n            \"name\": \"TableInBatchWriteRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"RowInBatchWriteRowResponse\",\n                \"name\": \"put_rows\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"RowInBatchWriteRowResponse\",\n                \"name\": \"update_rows\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"RowInBatchWriteRowResponse\",\n                \"name\": \"delete_rows\",\n                \"id\": 4\n              }\n            ]\n          },\n          {\n            \"name\": \"BatchWriteRowResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"TableInBatchWriteRowResponse\",\n                \"name\": \"tables\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"Direction\",\n            \"values\": [\n              {\n                \"name\": \"FORWARD\",\n                \"id\": 0\n              },\n              {\n                \"name\": \"BACKWARD\",\n                \"id\": 1\n              }\n            ]\n          },\n          {\n            \"name\": \"GetRangeRequest\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"string\",\n                \"name\": \"table_name\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"required\",\n                \"type\": \"Direction\",\n                \"name\": \"direction\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"string\",\n                \"name\": \"columns_to_get\",\n                \"id\": 3\n              },\n              {\n                \"rule\": \"optional\",\n                \"type\": \"int32\",\n                \"name\": \"limit\",\n                \"id\": 4\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"inclusive_start_primary_key\",\n                \"id\": 5\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"exclusive_end_primary_key\",\n                \"id\": 6\n              }\n            ]\n          },\n          {\n            \"name\": \"GetRangeResponse\",\n            \"fields\": [\n              {\n                \"rule\": \"required\",\n                \"type\": \"ConsumedCapacity\",\n                \"name\": \"consumed\",\n                \"id\": 1\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Column\",\n                \"name\": \"next_start_primary_key\",\n                \"id\": 2\n              },\n              {\n                \"rule\": \"repeated\",\n                \"type\": \"Row\",\n                \"name\": \"rows\",\n                \"id\": 3\n              }\n            ]\n          }\n        ]\n    );\n    // Resets the pointer to the root namespace:\n    builder.reset();\n\n    protos = builder.build(\"ots2\");\n\n    ALY.Service.prototype.initialize.call(this, options);\n  },\n\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.populateURI);\n    request.addListener('build', this.buildContent);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', this.extractData);\n  },\n\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.instance_name;\n\n    // 固定 endpoint\n    if (req.service.config.endpointFixed) {\n      return;\n    }\n\n    if (b) {\n      // 确保 host 只被 set 一次，因为 endpoint 只在 service 唯一\n      httpRequest.endpoint.host = httpRequest.endpoint.hostname = b + '.' + httpRequest.endpoint.hostname;\n\n      httpRequest.virtualHostedBucket = b;\n      httpRequest.path = httpRequest.path.replace(new RegExp('^/' + b), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    //httpRequest.headers['x-ots-contenttype'] = 'protocol buffer';\n    httpRequest.headers['x-ots-apiversion'] = '2014-08-08';\n    httpRequest.headers['x-ots-instancename'] = req.params.instance_name;\n  },\n\n  buildContent: function buildContent(req) {\n    var request;\n\n    switch(req.operation) {\n      case 'createTable':\n        request = new protos.CreateTableRequest({\n          table_meta: req.params.table_meta,\n          reserved_throughput: req.params.reserved_throughput\n        });\n        break;\n      case 'listTable':\n        request = new protos.ListTableRequest({});\n        break;\n      case 'deleteTable':\n        request = new protos.DeleteTableRequest({\n          table_name: req.params.table_name\n        });\n        break;\n      case 'updateTable':\n        request = new protos.UpdateTableRequest({\n          table_name: req.params.table_name\n        });\n        break;\n      case 'describeTable':\n        request = new protos.DescribeTableRequest({\n          table_name: req.params.table_name,\n          reserved_throughput: req.params.reserved_throughput\n        });\n        break;\n      case 'getRow':\n        request = new protos.GetRowRequest({\n          table_name: req.params.table_name,\n          primary_key: req.params.primary_key,\n          columns_to_get: req.params.columns_to_get\n        });\n        break;\n      case 'putRow':\n        request = new protos.PutRowRequest({\n          table_name: req.params.table_name,\n          condition: req.params.condition,\n          primary_key: req.params.primary_key,\n          attribute_columns: req.params.attribute_columns\n        });\n        break;\n      case 'updateRow':\n        request = new protos.UpdateRowRequest({\n          table_name: req.params.table_name,\n          condition: req.params.condition,\n          primary_key: req.params.primary_key,\n          attribute_columns: req.params.attribute_columns\n        });\n        break;\n      case 'deleteRow':\n        request = new protos.DeleteRowRequest({\n          table_name: req.params.table_name,\n          condition: req.params.condition,\n          primary_key: req.params.primary_key\n        });\n        break;\n      case 'getRange':\n        request = new protos.GetRangeRequest({\n          table_name: req.params.table_name,\n          direction: req.params.direction,\n          columns_to_get: req.params.columns_to_get,\n          limit: req.params.limit,\n          inclusive_start_primary_key: req.params.inclusive_start_primary_key,\n          exclusive_end_primary_key: req.params.exclusive_end_primary_key,\n        });\n        break;\n      case 'batchGetRow':\n        request = new protos.BatchGetRowRequest({\n          tables: req.params.tables\n        });\n        break;\n      case 'batchWriteRow':\n        request = new protos.BatchWriteRowRequest({\n          tables: req.params.tables\n        });\n        break;\n    }\n\n    var buffer = request.encode();\n\n    req.httpRequest.body = buffer.toBuffer();\n  },\n\n  computeContentMd5: function computeContentMd5(req) {\n    var md5 = ALY.util.crypto.md5(req.httpRequest.body, 'base64');\n    req.httpRequest.headers['x-ots-contentmd5'] = md5;\n  },\n\n  /**\n   * OSS requires that path params not escape forward slashes.\n   *\n   * @api private\n   */\n  escapePathParam: function escapePathParam(value) {\n    return ALY.util.uriEscapePath(String(value));\n  },\n\n  /**\n   * @return [Boolean] whether response contains an error\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    if (req.operation === 'completeMultipartUpload' &&\n        httpResponse.body.toString().match('<Error>'))\n      return false;\n    else\n      return httpResponse.statusCode < 300;\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (request.operation == 'completeMultipartUpload' &&\n        error.statusCode === 200) {\n      return true;\n    } else {\n      var _super = ALY.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    resp.data = protos[capitalizeFirstLetter(resp.request.operation) + \"Response\"].decode(resp.httpResponse.body);\n\n    // extract request id\n    resp.data.RequestId = resp.httpResponse.headers['x-ots-request-id'] ||\n        resp.httpResponse.headers['x-ots-requestid'];\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body;\n    if (codes[code] && body.length === 0) {\n      resp.error = ALY.util.error(new Error(), {\n        code: codes[resp.httpResponse.statusCode],\n        message: null,\n        headers: resp.httpResponse.headers\n      });\n    } else {\n      var data;\n      try {\n        data = new ALY.XML.Parser({}).parse(body.toString());\n        resp.error = ALY.util.error(new Error(), {\n          code: data.Code || code,\n          message: data.Message || null,\n          headers: resp.httpResponse.headers\n        });\n      }\n      catch (e) {\n        data = body.toString();\n        resp.error = ALY.util.error(new Error(), {\n          code: code,\n          message: data,\n          headers: resp.httpResponse.headers\n        });\n      }\n    }\n  }\n\n});\n\nmodule.exports = ALY.OSS;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/services/sls.js":"var ALY = require('../core');\nvar parseURL = require('url').parse;\nvar po_protobuf = require('pomelo-protobuf');\nvar zlib = require('zlib');\n\nvar proto_json = {\n  \"message Log\":\n  {\n      \"required uInt32 time\": 1,  \n      \"message Content\":\n      {   \n          \"required string key\": 1,\n          \"required string value\": 2\n      },  \n      \"repeated Content contents\": 2\n  },  \n  \"LogGroup\":\n  {\n      \"repeated Log logs\": 1,\n      \"optional string category\": 2,\n      \"optional string topic\": 3,\n      \"optional string source\": 4,\n      \"optional string MachineUUID\":5\n  },  \n  \"LogStore\":\n  {\n      \"repeated Log logs\": 1,\n      \"optional string category\": 2,\n      \"optional string topic\": 3,\n      \"optional string source\": 4\n  },  \n  \"LogGroupList\":\n  {\n      \"message LogGroup\":\n      {\n          \"repeated Log logs\": 1,\n          \"optional string category\": 2,\n          \"optional string topic\": 3,\n          \"optional string source\": 4,\n          \"optional string MachineUUID\":5\n      },\n      \"repeated LogGroup logGroupList\":1\n  }\n};\n\nvar protos = po_protobuf.parse(proto_json);\n\n\n\nALY.SLS = ALY.Service.defineService('sls', ['2015-06-01'], {\n  /**\n   * @api private\n   */\n  initialize: function initialize(options) {\n    ALY.Service.prototype.initialize.call(this, options);\n  },\n\n  setupRequestListeners: function setupRequestListeners(request) {\n\n    request.addListener('build', this.addContentType);\n    request.addAsyncListener('build', this.buildContent);\n    request.addListener('build', this.populateURI);\n\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSha256);\n\n    request.removeListener('validate',\n        ALY.EventListeners.Core.VALIDATE_REGION);\n\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', this.extractData);\n\n    //request.addListener('afterBuild', function (req) {\n    //    //Host in request.header\n    //    console.log(req.httpRequest.headers['projectName'], req.params['projectName']);\n    //\n    //    req.httpRequest.headers['Host'] = req.params['projectName']\n    //       +'.'+req.httpRequest.endpoint.hostname;\n    //    //头中的 projectName 不需要\n    //    delete req.httpRequest.headers['projectName'];\n    //});\n\n  },\n\n  populateURI: function populateURI(req) {\n    var hostname = req.httpRequest.endpoint.hostname;\n\n    var projectName = req.params['projectName'];\n    var host = projectName+'.'+ hostname;\n\n\n    if(!/^[0-9.]+$/.test(hostname)){\n      //不是ip,  是域名, 则需要拼接project名\n      var protocol = req.httpRequest.endpoint.protocol;\n      var port = req.httpRequest.endpoint.port;\n\n      //real endpoint\n      var endpointObj = parseURL(protocol+'//'+host+':'+port);\n\n      ALY.util.update(req.httpRequest, {endpoint: endpointObj });\n      // ALY.util.update(req.service, {endpoint: endpointObj });\n    }\n\n    //final host， 不管是ip还是域名，都要拼接project名\n    req.httpRequest.headers['Host'] = host;\n\n    //头中的 projectName 不需要\n    delete req.httpRequest.headers['projectName'];\n  },\n\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    var headers = httpRequest.headers;\n\n    headers['x-log-signaturemethod'] = 'hmac-sha1';\n    headers['x-log-apiversion'] = '0.6.0';\n    headers['x-log-bodyrawsize'] = 0;\n  },\n\n  buildContent: function addContentType(req, done) {\n    var httpRequest = req.httpRequest;\n    var headers = httpRequest.headers;\n\n    if(req.operation === 'putLogs'){\n\n      headers['Content-Type'] = 'application/x-protobuf';\n      headers['x-log-compresstype'] = 'deflate';\n\n      var protoBufferEncode = function(name, json) {\n        po_protobuf.init({\n          encoderProtos: protos,\n          decoderProtos: protos\n        });\n        return po_protobuf.encode(name, json);\n      };\n\n      var deflate = function(pb, fn){\n        zlib.deflate(pb, function(err, buf) {\n          fn(err, buf);\n        });\n      };\n\n\n      var logGroup = JSON.parse(req.httpRequest.body);\n\n\n      if(!logGroup.logs){\n        throw ALY.util.error(new Error(), {\n          code: 'ContentError', message: 'Logitems is empty.', retryable: false\n        });\n      }\n      if(logGroup.logs.length>4096){\n        throw ALY.util.error(new Error(), {\n          code: 'ContentError', message: 'Logitems length exceed 4096.', retryable: false\n        });\n      }\n\n\n      var pb = protoBufferEncode('LogGroup', logGroup);\n\n      if(pb.length>3*1024*1024){\n        throw ALY.util.error(new Error(), {\n          code: 'ContentError', message: 'Logitems size exceed 5MB', retryable: false\n        });\n      }\n\n      httpRequest.headers['x-log-bodyrawsize'] = pb.length;\n\n      deflate(pb, function(err, buf) {\n        if(err){\n          throw ALY.util.error(new Error(), {\n            code: 'ContentError', message: err.message, retryable: false\n          });\n        }\n        else{\n          req.httpRequest.body = buf;\n          done();\n        }\n      });\n\n    }\n    else if (req.operation == \"batchGetLogs\")\n    {\n        headers[\"Accept\"] = \"application/x-protobuf\";\n        headers[\"Accept-Encoding\"] = \"\";\n        done();\n    }\n    else{\n        if(req.httpRequest.body != null && req.httpRequest.body != \"\")\n            headers['Content-Type'] = 'application/json';\n      done();\n    }\n  },\n\n  willComputeChecksums: function willComputeChecksums(req) {\n\n    // // TODO: compute checksums for Stream objects\n    // if (!ALY.util.Buffer.isBuffer(req.httpRequest.body) &&\n    //     typeof req.httpRequest.body !== 'string') {\n    //     return false;\n    // }\n\n    var rules = req.service.api.operations[req.operation].input;\n\n    // // V4 signer uses SHA256 signatures so only compute MD5 if it is required\n    // if (req.service.getSignerClass(req) === ALY.Signers.V4) {\n    //     if (rules.ContentMD5 && !rules.ContentMD5.required) return false;\n    // }\n\n    if (rules.ContentMD5) return true;\n  },\n\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = ALY.util.crypto.md5(req.httpRequest.body, 'hex').toUpperCase();\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  computeSha256: function computeSha256(req) {\n    if (req.service.getSignerClass(req) === ALY.Signers.V4) {\n      req.httpRequest.headers['X-Amz-Content-Sha256'] =\n          ALY.util.crypto.sha256(req.httpRequest.body || '', 'hex');\n    }\n  },\n\n  escapePathParam: function escapePathParam(value) {\n    return ALY.util.uriEscapePath(String(value));\n  },\n\n\n  successfulResponse: function successfulResponse(resp) {\n    //var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    return httpResponse.statusCode < 300;\n  },\n\n  retryableError: function retryableError(error, request) {\n\n    var _super = ALY.Service.prototype.retryableError;\n    return _super.call(this, error, request);\n\n  },\n\n  extractData: function extractData(resp) {\n    //去掉RequestId\n    delete resp.data.RequestId;\n    var body =  resp.data;\n    resp.data = {};\n    var reqId = resp.httpResponse.headers['x-log-requestid'];\n    if (reqId) {\n        resp.data.request_id = reqId;\n    }\n    resp.data.headers = resp.httpResponse.headers;\n\n    var protoBufferDecode= function(name, data) {\n                po_protobuf.init({\n                  encoderProtos: protos,\n                  decoderProtos: protos\n                });\n                return po_protobuf.decode(name, data);\n              };\n\n     if (resp.httpResponse.headers['x-log-compresstype'] == \"deflate\")\n     { \n         if(body.logGroupListBuf != null)\n         {\n             uncompressed = zlib.inflateSync(body.logGroupListBuf);\n         }\n         else\n         {\n             uncompressed = resp.data.logGroupListBuf;\n         }\n         var pb = protoBufferDecode(\"LogGroupList\",uncompressed);\n         resp.data.body = pb;\n     }\n     else\n     {\n         if(resp.data.headers['content-type']== 'application/x-protobuf')\n         {\n             var pb = protoBufferDecode(\"LogGroupList\",body.logGroupListBuf);\n             resp.data.body = pb;\n         }\n         else\n             resp.data.body = body;\n     }\n  },\n\n  extractError: function extractError(resp) {\n    var headers = resp.httpResponse.headers;\n\n    var body = resp.httpResponse.body;\n    var error = body.toString();\n\n    try{\n      error = JSON.parse(error);\n    }catch(e){\n      error = {};\n    }\n\n    error = ALY.util.update(error, {\n      request_id : headers['x-log-requestid'] || null,\n      code: resp.httpResponse.statusCode,\n      message: body.toString(),\n      headers: headers\n    });\n\n    resp.error = ALY.util.error(new Error(), error);\n  }\n\n});\n\nmodule.exports = ALY.SLS;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/browser.js":"window.ALY = module.exports = require('./lib/core');\nrequire('./lib/http/xhr');\n\nrequire('./lib/services/oss');\nrequire('./lib/services/opensearch');\nrequire('./lib/services/batchcompute');\n\nALY.ECS = ALY.Service.defineService('ecs', ['2014-05-26']);\nALY.RDS = ALY.Service.defineService('rds', ['2014-08-15']);\nALY.SLB = ALY.Service.defineService('slb', ['2014-05-15']);\nALY.CDN = ALY.Service.defineService('cdn', ['2014-11-11']);\nALY.STS = ALY.Service.defineService('sts', ['2015-04-01']);\nALY.ESS = ALY.Service.defineService('ess', ['2014-08-28']);\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/util-browser.js":"/*global escape:true */\n\nvar ALY = require('./core');\n//var cryptoLib = require('crypto');\nvar jsSHA = require('../bower_components/jsSHA/src/sha.js');\nvar SparkMD5 = require('../bower_components/spark-md5/spark-md5.js');\n\n/* jshint -W079 */\nvar Buffer = require('buffer').Buffer;\n/* jshint +W079 */\n\n/**\n * A set of utility methods for use with the ALY SDK.\n *\n * @!attribute abort\n *   Return this value from an iterator function {each} or {arrayEach}\n *   to break out of the iteration.\n *   @example Breaking out of an iterator function\n *     ALY.util.each({a: 1, b: 2, c: 3}, function(key, value) {\n *       if (key == 'b') return ALY.util.abort;\n *     });\n *   @see each\n *   @see arrayEach\n * @api private\n */\nALY.util = {\n  engine: function engine() {\n    if (ALY.util.isBrowser() && typeof navigator !== 'undefined') {\n      return navigator.userAgent;\n    } else {\n      return process.platform + '/' + process.version;\n    }\n  },\n\n  userAgent: function userAgent() {\n    // 在 浏览器中不能设置 ua\n    return \"\";\n  },\n\n  isBrowser: function isBrowser() { return typeof window !== 'undefined'; },\n  isNode: function isNode() { return !ALY.util.isBrowser(); },\n  nodeRequire: function nodeRequire(module) {\n    if (ALY.util.isNode()) return require(module);\n  },\n\n  // todo: atob, btoa\n  hexToBase64: function (str) {\n    return btoa(String.fromCharCode.apply(null,\n            str.replace(/\\r|\\n/g, \"\").replace(/([\\da-fA-F]{2}) ?/g, \"0x$1 \").replace(/ +$/, \"\").split(\" \"))\n    );\n  },\n\n  topEscape: function(clearString) {\n    var output = '';\n    var x = 0;\n    clearString = clearString.toString();\n    var regex = /(^[a-zA-Z0-9-_.~]*)/;\n    while (x < clearString.length) {\n      var match = regex.exec(clearString.substr(x));\n      if (match != null && match.length > 1 && match[1] != '') {\n        output += match[1];\n        x += match[1].length;\n      } else {\n        if (clearString[x] == ' ')\n          output += '%20';\n        else {\n          var charCode = clearString.charCodeAt(x);\n          var hexVal = charCode.toString(16);\n          output += '%' + ( hexVal.length < 2 ? '0' : '' ) + hexVal.toUpperCase();\n        }\n        x++;\n      }\n    }\n    return output;\n  },\n\n  popEscape: function(clearString) {\n    clearString = clearString.toString();\n    clearString = encodeURIComponent(clearString)\n        .replace(/\\!/gi, '%21')\n        .replace(/\\'/gi, '%27')\n        .replace(/\\(/gi, '%28')\n        .replace(/\\)/gi, '%29')\n        .replace(/\\*/gi, '%2A')\n    return clearString;\n  },\n\n  opensearchEscape: function(clearString) {\n    // http://v8.googlecode.com/svn/trunk/src/uri.js\n    return encodeURIComponent(clearString)\n      .replace(/\\!/gi, '%21')\n      .replace(/\\'/gi, '%27')\n      .replace(/\\(/gi, '%28')\n      .replace(/\\)/gi, '%29')\n      .replace(/\\*/gi, '%2A')\n  },\n\n  uriEscape: function uriEscape(string) {\n    /*jshint undef:false */\n    var output = encodeURIComponent(string);\n    output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\n\n    // percent-encodes some extra non-standard characters in a URI\n    output = output.replace(/[*]/g, function(ch) {\n      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();\n    });\n\n    return output;\n  },\n\n  uriEscapePath: function uriEscapePath(string) {\n    var parts = [];\n    ALY.util.arrayEach(string.split('/'), function (part) {\n      parts.push(ALY.util.uriEscape(part));\n    });\n    return parts.join('/');\n  },\n\n  urlParse: function urlParse(url) {\n    return require('url').parse(url);\n  },\n\n  urlFormat: function urlFormat(url) {\n    return require('url').format(url);\n  },\n\n  uuid: function generateUUID(){\n    var d = new Date().getTime();\n    if(window.performance && typeof window.performance.now === \"function\"){\n      d += performance.now(); //use high-precision timer if available\n    }\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (d + Math.random()*16)%16 | 0;\n      d = Math.floor(d/16);\n      return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n  },\n\n  queryParamsToString: function queryParamsToString(params) {\n    var items = [];\n    var escape = ALY.util.uriEscape;\n    var sortedKeys = Object.keys(params).sort();\n\n    ALY.util.arrayEach(sortedKeys, function(name) {\n      var value = params[name];\n      var ename = escape(name);\n      var result = ename;\n      if (Array.isArray(value)) {\n        var vals = [];\n        ALY.util.arrayEach(value, function(item) { vals.push(escape(item)); });\n        result = ename + '=' + vals.sort().join('&' + ename + '=');\n      } else if (value !== undefined && value !== null) {\n        result = ename + '=' + escape(value);\n      }\n      items.push(result);\n    });\n\n    return items.join('&');\n  },\n\n  readFileSync: function readFileSync(path) {\n    if (typeof window !== 'undefined') return null;\n    return require('fs').readFileSync(path, 'utf-8');\n  },\n\n  base64: {\n\n    encode: function encode64(string) {\n      return new Buffer(string).toString('base64');\n    },\n\n    decode: function decode64(string) {\n      return new Buffer(string, 'base64').toString();\n    }\n\n  },\n\n  Buffer: Buffer,\n\n  buffer: {\n    /**\n     * Concatenates a list of Buffer objects.\n     */\n    concat: function(buffers) {\n      var length = 0,\n          offset = 0,\n          buffer = null, i;\n\n      for (i = 0; i < buffers.length; i++) {\n        length += buffers[i].length;\n      }\n\n      buffer = new Buffer(length);\n\n      for (i = 0; i < buffers.length; i++) {\n        buffers[i].copy(buffer, offset);\n        offset += buffers[i].length;\n      }\n\n      return buffer;\n    }\n  },\n\n  string: {\n    byteLength: function byteLength(string) {\n      if (string === null || string === undefined) return 0;\n      if (typeof string === 'string') string = new Buffer(string);\n\n      if (typeof string.byteLength === 'number') {\n        return string.byteLength;\n      } else if (typeof string.length === 'number') {\n        return string.length;\n      } else if (typeof string.size === 'number') {\n        return string.size;\n      } else if (typeof string.path === 'string') {\n        return require('fs').lstatSync(string.path).size;\n      } else {\n        throw ALY.util.error(new Error('Cannot determine length of ' + string),\n          { object: string });\n      }\n    }\n  },\n\n  jamespath: {\n    query: function query(expression, data) {\n      if (!data) return [];\n\n      var results = [];\n      var expressions = expression.split(/\\s+or\\s+/);\n      ALY.util.arrayEach.call(this, expressions, function (expr) {\n        var objects = [data];\n        var tokens = expr.split('.');\n        ALY.util.arrayEach.call(this, tokens, function (token) {\n          var match = token.match('^(.+?)(?:\\\\[(-?\\\\d+|\\\\*)\\\\])?$');\n          var newObjects = [];\n          ALY.util.arrayEach.call(this, objects, function (obj) {\n            if (match[1] === '*') {\n              ALY.util.arrayEach.call(this, obj, function (value) {\n                newObjects.push(value);\n              });\n            } else if (obj.hasOwnProperty(match[1])) {\n              newObjects.push(obj[match[1]]);\n            }\n          });\n          objects = newObjects;\n\n          // handle indexing (token[0], token[-1])\n          if (match[2]) {\n            newObjects = [];\n            ALY.util.arrayEach.call(this, objects, function (obj) {\n              if (Array.isArray(obj)) {\n                if (match[2] === '*') {\n                  newObjects = newObjects.concat(obj);\n                } else {\n                  var idx = parseInt(match[2], 10);\n                  if (idx < 0) idx = obj.length + idx; // negative indexing\n                  newObjects.push(obj[idx]);\n                }\n              }\n            });\n            objects = newObjects;\n          }\n\n          if (objects.length === 0) return ALY.util.abort;\n        });\n\n        if (objects.length > 0) {\n          results = objects;\n          return ALY.util.abort;\n        }\n      });\n\n      return results;\n    },\n\n    find: function find(expression, data) {\n      return ALY.util.jamespath.query(expression, data)[0];\n    }\n  },\n\n  /**\n   * Date and time utility functions.\n   */\n  date: {\n\n    /**\n     * @return [Date] the current JavaScript date object. Since all\n     *   ALY services rely on this date object, you can override\n     *   this function to provide a special time value to ALY service\n     *   requests.\n     */\n    getDate: function getDate() { return new Date(); },\n\n    // for taobao open platform\n    top: function top(date, fmt) {\n      fmt = fmt || '%Y-%M-%dT%H:%m:%sZ';\n\n      function pad(value) {\n        return (value.toString().length < 2) ? '0' + value : value;\n      };\n\n      return fmt.replace(/%([a-zA-Z])/g, function (_, fmtCode) {\n        switch (fmtCode) {\n          case 'Y':\n            return date.getUTCFullYear();\n          case 'M':\n            return pad(date.getUTCMonth() + 1);\n          case 'd':\n            return pad(date.getUTCDate());\n          case 'H':\n            return pad(date.getUTCHours());\n          case 'm':\n            return pad(date.getUTCMinutes());\n          case 's':\n            return pad(date.getUTCSeconds());\n          default:\n            throw new Error('Unsupported format code: ' + fmtCode);\n        }\n      });\n    },\n\n    /**\n     * @return [String] the date in ISO-8601 format\n     */\n    iso8601: function iso8601(date) {\n      if (date === undefined) { date = ALY.util.date.getDate(); }\n      return date.toISOString();\n    },\n\n    /**\n     * @return [String] the date in RFC 822 format\n     */\n    rfc822: function rfc822(date) {\n      if (date === undefined) { date = ALY.util.date.getDate(); }\n      return date.toUTCString();\n    },\n\n    unixSeconds: function unixSeconds(date) {\n      if (date === undefined) { date = ALY.util.date.getDate(); }\n      return Math.floor(date.getTime() / 1000);\n    },\n\n    unixMilliseconds: function unixMilliseconds(date) {\n      if (date === undefined) { date = ALY.util.date.getDate(); }\n      return date.getTime();\n    },\n\n    /**\n     * @param [String,number,Date] date\n     * @return [Date]\n     */\n    from: function format(date) {\n      if (typeof date === 'number') {\n        if(date.toString().length == 10) {\n          return new Date(date * 1000); // unix timestamp in seconds\n        }\n        return new Date(date); // unix timestamp in mill seconds\n      }\n      else if(Object.prototype.toString.call(date) === '[object Date]') {\n        return date;\n      }\n      else {\n        return new Date(date);\n      }\n    },\n\n    /**\n     * Given a Date or date-like value, this function formats the\n     * date into a string of the requested value.\n     * @param [String,number,Date] date\n     * @param [String] formatter Valid formats are:\n     #   * 'iso8601'\n     #   * 'rfc822'\n     #   * 'unixSeconds'\n     #   * 'unixMilliseconds'\n     * @return [String]\n     */\n    format: function format(date, formatter) {\n      if (!formatter) formatter = 'unixSeconds';\n      return ALY.util.date[formatter](ALY.util.date.from(date));\n    }\n\n  },\n\n  crypto: {\n    crc32Table: [\n     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,\n     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,\n     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,\n     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,\n     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,\n     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,\n     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,\n     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,\n     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,\n     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,\n     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,\n     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,\n     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,\n     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,\n     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,\n     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,\n     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,\n     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,\n     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,\n     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,\n     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,\n     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,\n     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,\n     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,\n     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,\n     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,\n     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,\n     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,\n     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,\n     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,\n     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,\n     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,\n     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,\n     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,\n     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,\n     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,\n     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,\n     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,\n     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,\n     0x2D02EF8D],\n\n    crc32: function crc32(data) {\n      /*jshint bitwise:false*/\n      var tbl = ALY.util.crypto.crc32Table;\n      var crc = 0 ^ -1;\n\n      if (typeof data === 'string') {\n        data = new Buffer(data);\n      }\n\n      for (var i = 0; i < data.length; i++) {\n        var code = data.readUInt8(i);\n        crc = (crc>>>8) ^ tbl[(crc^code)&0xFF];\n      }\n      return (crc ^ -1) >>> 0;\n    },\n\n    hmac: function hmac(key, string, digest, fn) {\n      if (!digest) digest = 'binary';\n\n      if (digest === 'buffer') {\n        digest = undefined;\n        // todo: 不支持 buffer 类型的 hash\n        return \"\";\n      }\n\n      if (!fn) fn = 'sha256';\n\n      if (typeof string != 'string') {\n        //string = new Buffer(string);\n        // todo: 目前只支持 string\n        return \"\";\n      }\n\n      var shaObj;\n      switch (fn) {\n        case \"md5\":\n          // todo: 不支持 md5\n          return \"\";\n        case \"sha1\":\n          shaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n          break;\n        case \"sha256\":\n          shaObj = new jsSHA(\"SHA-256\", \"TEXT\");\n          break;\n        case \"sha512\":\n          shaObj = new jsSHA(\"SHA-512\", \"TEXT\");\n          break;\n        default:\n          return \"\";\n      }\n\n      shaObj.setHMACKey(key, \"TEXT\");\n\n      shaObj.update(string);\n\n      switch(digest) {\n        case \"binary\":\n          return shaObj.getHMAC(\"BYTES\");\n        case \"hex\":\n          return shaObj.getHMAC(\"HEX\");\n        case \"base64\":\n          return shaObj.getHMAC(\"B64\");\n        default:\n          return \"\";\n      }\n    },\n\n    // https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding\n    md5: function md5(data, digest) {\n      var hash = \"\";\n\n      if (!digest) { digest = 'binary'; }\n\n      if (digest === 'buffer') {\n        digest = undefined;\n        // todo: 不支持 buffer 类型的 hash\n        return \"\";\n      }\n\n      if (typeof data === 'string') {\n        switch(digest) {\n          case \"binary\":\n            return SparkMD5.hash(data, true);\n          case \"hex\":\n            return SparkMD5.hash(data);\n          case \"base64\":\n            return ALY.util.hexToBase64(SparkMD5.hash(data));\n          default:\n            return \"\";\n        }\n      }\n      else {  // array buffer\n        switch(digest) {\n          case \"binary\":\n            return SparkMD5.ArrayBuffer.hash(data, true);\n          case \"hex\":\n            return SparkMD5.ArrayBuffer.hash(data);\n          case \"base64\":\n            return ALY.util.hexToBase64(SparkMD5.ArrayBuffer.hash(data));\n          default:\n            return \"\";\n        }\n      }\n    },\n\n    // 目前不支持 sha256 hash\n    sha256: function sha256(string, digest) {\n      //if (!digest) { digest = 'binary'; }\n      //if (digest === 'buffer') { digest = undefined; }\n      //if (typeof string === 'string') string = new Buffer(string);\n      //return ALY.util.crypto.createHash('sha256').update(string).digest(digest);\n      return \"\";\n    },\n\n    toHex: function toHex(data) {\n      var out = [];\n      for (var i = 0; i < data.length; i++) {\n        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));\n      }\n      return out.join('');\n    }\n\n  },\n\n  /** @!ignore */\n\n  /* Abort constant */\n  abort: {},\n\n  each: function each(object, iterFunction) {\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        var ret = iterFunction.call(this, key, object[key]);\n        if (ret === ALY.util.abort) break;\n      }\n    }\n  },\n\n  arrayEach: function arrayEach(array, iterFunction) {\n    for (var idx in array) {\n      if (array.hasOwnProperty(idx)) {\n        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));\n        if (ret === ALY.util.abort) break;\n      }\n    }\n  },\n\n  update: function update(obj1, obj2) {\n    ALY.util.each(obj2, function iterator(key, item) {\n      obj1[key] = item;\n    });\n    return obj1;\n  },\n\n  merge: function merge(obj1, obj2) {\n    return ALY.util.update(ALY.util.copy(obj1), obj2);\n  },\n\n  copy: function copy(object) {\n    if (object === null || object === undefined) return object;\n    var dupe = {};\n    /*jshint forin:false */\n    for (var key in object) {\n      dupe[key] = object[key];\n    }\n    return dupe;\n  },\n\n  isEmpty: function isEmpty(obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  isType: function isType(obj, type) {\n    // handle cross-\"frame\" objects\n    if (typeof type === 'function') type = ALY.util.typeName(type);\n    return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n  },\n\n  typeName: function typeName(type) {\n    if (type.hasOwnProperty('name')) return type.name;\n    var str = type.toString();\n    var match = str.match(/^\\s*function (.+)\\(/);\n    return match ? match[1] : str;\n  },\n\n  error: function error(err, options) {\n    var originalError = null;\n    if (typeof err.message === 'string' && err.message !== '') {\n      if (typeof options === 'string' || (options && options.message)) {\n        originalError = ALY.util.copy(err);\n        originalError.message = err.message;\n      }\n    }\n    err.message = err.message || null;\n\n    if (typeof options === 'string') {\n      err.message = options;\n    } else {\n      ALY.util.update(err, options);\n    }\n\n    if (typeof Object.defineProperty === 'function') {\n      Object.defineProperty(err, 'name', {writable: true, enumerable: false});\n      Object.defineProperty(err, 'message', {enumerable: true});\n    }\n\n    err.name = err.name || err.code || 'Error';\n    err.time = new Date();\n\n    if (originalError) err.originalError = originalError;\n\n    return err;\n  },\n\n  /**\n   * @api private\n   */\n  inherit: function inherit(klass, features) {\n    var newObject = null;\n    if (features === undefined) {\n      features = klass;\n      klass = Object;\n      newObject = {};\n    } else {\n      /*jshint newcap:false */\n      /*jshint camelcase:false */\n      var ctor = function __ctor_wrapper__() {};\n      ctor.prototype = klass.prototype;\n      newObject = new ctor();\n    }\n\n    // constructor not supplied, create pass-through ctor\n    if (features.constructor === Object) {\n      features.constructor = function() {\n        if (klass !== Object) {\n          return klass.apply(this, arguments);\n        }\n      };\n    }\n\n    features.constructor.prototype = newObject;\n    ALY.util.update(features.constructor.prototype, features);\n    features.constructor.__super__ = klass;\n    return features.constructor;\n  },\n\n  /**\n   * @api private\n   */\n  mixin: function mixin() {\n    var klass = arguments[0];\n    for (var i = 1; i < arguments.length; i++) {\n      /*jshint forin:false*/\n      for (var prop in arguments[i].prototype) {\n        var fn = arguments[i].prototype[prop];\n        if (prop != 'constructor') {\n          klass.prototype[prop] = fn;\n        }\n      }\n    }\n    return klass;\n  },\n\n  /**\n   * @api private\n   */\n  hideProperties: function hideProperties(obj, props) {\n    if (typeof Object.defineProperty !== 'function') return;\n\n    ALY.util.arrayEach(props, function (key) {\n      Object.defineProperty(obj, key, {\n        enumerable: false, writable: true, configurable: true });\n    });\n  }\n};\n\nmodule.exports = ALY.util;\n","/home/travis/build/npmtest/node-npmtest-aliyun-sdk/node_modules/aliyun-sdk/lib/http/xhr.js":"var ALY = require('../core');\nvar EventEmitter = require('events').EventEmitter;\nrequire('../http');\n\n/**\n * @api private\n */\nALY.XHRClient = ALY.util.inherit({\n  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {\n    var self = this;\n    var endpoint = httpRequest.endpoint;\n    var emitter = new EventEmitter();\n    var href = endpoint.protocol + '//' + endpoint.hostname;\n    if (endpoint.port != 80 && endpoint.port != 443) {\n      href += ':' + endpoint.port;\n    }\n    href += httpRequest.path;\n\n    var xhr = new XMLHttpRequest();\n    httpRequest.stream = xhr;\n\n    if (httpOptions.timeout) {\n      xhr.timeout = httpOptions.timeout;\n    }\n\n    xhr.addEventListener('readystatechange', function() {\n      try {\n        if (xhr.status === 0) return; // 0 code is invalid\n      }\n      catch (e) { return; }\n\n      if (this.readyState === this.HEADERS_RECEIVED) {\n        try { xhr.responseType = 'arraybuffer'; } catch (e) {}\n        emitter.statusCode = xhr.status;\n        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());\n        emitter.emit('headers', emitter.statusCode, emitter.headers);\n      } else if (this.readyState === this.DONE) {\n        self.finishRequest(xhr, emitter);\n      }\n    }, false);\n    xhr.upload.addEventListener('progress', function (evt) {\n      emitter.emit('sendProgress', evt);\n    });\n    xhr.addEventListener('progress', function (evt) {\n      emitter.emit('receiveProgress', evt);\n    }, false);\n    xhr.addEventListener('timeout', function () {\n      errCallback(ALY.util.error(new Error('Timeout'), {code: 'TimeoutError'}));\n    }, false);\n    xhr.addEventListener('error', function () {\n      errCallback(ALY.util.error(new Error('Network Failure'), {\n        code: 'NetworkingError'\n      }));\n    }, false);\n\n    callback(emitter);\n    xhr.open(httpRequest.method, href, true);\n    ALY.util.each(httpRequest.headers, function (key, value) {\n      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host' && key !== 'Date') {\n        xhr.setRequestHeader(key, value);\n      }\n    });\n\n    if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {\n      xhr.send(httpRequest.body.buffer); // typed arrays sent as ArrayBuffer\n    } else {\n      xhr.send(httpRequest.body);\n    }\n\n    return emitter;\n  },\n\n  parseHeaders: function parseHeaders(rawHeaders) {\n    var headers = {};\n    ALY.util.arrayEach(rawHeaders.split(/\\r?\\n/), function (line) {\n      var key = line.split(':', 1)[0];\n      var value = line.substring(key.length + 2);\n      if (key.length > 0) headers[key] = value;\n    });\n    return headers;\n  },\n\n  finishRequest: function finishRequest(xhr, emitter) {\n    var buffer;\n    if (xhr.responseType === 'arraybuffer' && xhr.response) {\n      var ab = xhr.response;\n      buffer = new ALY.util.Buffer(ab.byteLength);\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n      }\n    }\n\n    try {\n      if (!buffer && typeof xhr.responseText === 'string') {\n        buffer = new ALY.util.Buffer(xhr.responseText);\n      }\n    } catch (e) {}\n\n    if (buffer) emitter.emit('data', buffer);\n    emitter.emit('end');\n  }\n});\n\n/**\n * @api private\n */\nALY.HttpClient.prototype = ALY.XHRClient.prototype;\n\n/**\n * @api private\n */\nALY.HttpClient.streamsApiVersion = 1;\n"}